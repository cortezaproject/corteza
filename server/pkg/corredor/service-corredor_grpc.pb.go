// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package corredor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ServerScriptsClient is the client API for ServerScripts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerScriptsClient interface {
	// Executes server script
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)
	// List of server scripts
	List(ctx context.Context, in *ServerScriptListRequest, opts ...grpc.CallOption) (*ServerScriptListResponse, error)
}

type serverScriptsClient struct {
	cc grpc.ClientConnInterface
}

func NewServerScriptsClient(cc grpc.ClientConnInterface) ServerScriptsClient {
	return &serverScriptsClient{cc}
}

func (c *serverScriptsClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	out := new(ExecResponse)
	err := c.cc.Invoke(ctx, "/corredor.ServerScripts/Exec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverScriptsClient) List(ctx context.Context, in *ServerScriptListRequest, opts ...grpc.CallOption) (*ServerScriptListResponse, error) {
	out := new(ServerScriptListResponse)
	err := c.cc.Invoke(ctx, "/corredor.ServerScripts/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerScriptsServer is the server API for ServerScripts service.
// All implementations must embed UnimplementedServerScriptsServer
// for forward compatibility
type ServerScriptsServer interface {
	// Executes server script
	Exec(context.Context, *ExecRequest) (*ExecResponse, error)
	// List of server scripts
	List(context.Context, *ServerScriptListRequest) (*ServerScriptListResponse, error)
	mustEmbedUnimplementedServerScriptsServer()
}

// UnimplementedServerScriptsServer must be embedded to have forward compatible implementations.
type UnimplementedServerScriptsServer struct {
}

func (UnimplementedServerScriptsServer) Exec(context.Context, *ExecRequest) (*ExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedServerScriptsServer) List(context.Context, *ServerScriptListRequest) (*ServerScriptListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedServerScriptsServer) mustEmbedUnimplementedServerScriptsServer() {}

// UnsafeServerScriptsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerScriptsServer will
// result in compilation errors.
type UnsafeServerScriptsServer interface {
	mustEmbedUnimplementedServerScriptsServer()
}

func RegisterServerScriptsServer(s *grpc.Server, srv ServerScriptsServer) {
	s.RegisterService(&_ServerScripts_serviceDesc, srv)
}

func _ServerScripts_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerScriptsServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corredor.ServerScripts/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerScriptsServer).Exec(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerScripts_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerScriptListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerScriptsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corredor.ServerScripts/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerScriptsServer).List(ctx, req.(*ServerScriptListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServerScripts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "corredor.ServerScripts",
	HandlerType: (*ServerScriptsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _ServerScripts_Exec_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ServerScripts_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service-corredor.proto",
}

// ClientScriptsClient is the client API for ClientScripts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientScriptsClient interface {
	// Bundles
	Bundle(ctx context.Context, in *BundleRequest, opts ...grpc.CallOption) (*BundleResponse, error)
	// List of client scripts
	List(ctx context.Context, in *ClientScriptListRequest, opts ...grpc.CallOption) (*ClientScriptListResponse, error)
}

type clientScriptsClient struct {
	cc grpc.ClientConnInterface
}

func NewClientScriptsClient(cc grpc.ClientConnInterface) ClientScriptsClient {
	return &clientScriptsClient{cc}
}

func (c *clientScriptsClient) Bundle(ctx context.Context, in *BundleRequest, opts ...grpc.CallOption) (*BundleResponse, error) {
	out := new(BundleResponse)
	err := c.cc.Invoke(ctx, "/corredor.ClientScripts/Bundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientScriptsClient) List(ctx context.Context, in *ClientScriptListRequest, opts ...grpc.CallOption) (*ClientScriptListResponse, error) {
	out := new(ClientScriptListResponse)
	err := c.cc.Invoke(ctx, "/corredor.ClientScripts/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientScriptsServer is the server API for ClientScripts service.
// All implementations must embed UnimplementedClientScriptsServer
// for forward compatibility
type ClientScriptsServer interface {
	// Bundles
	Bundle(context.Context, *BundleRequest) (*BundleResponse, error)
	// List of client scripts
	List(context.Context, *ClientScriptListRequest) (*ClientScriptListResponse, error)
	mustEmbedUnimplementedClientScriptsServer()
}

// UnimplementedClientScriptsServer must be embedded to have forward compatible implementations.
type UnimplementedClientScriptsServer struct {
}

func (UnimplementedClientScriptsServer) Bundle(context.Context, *BundleRequest) (*BundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bundle not implemented")
}
func (UnimplementedClientScriptsServer) List(context.Context, *ClientScriptListRequest) (*ClientScriptListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedClientScriptsServer) mustEmbedUnimplementedClientScriptsServer() {}

// UnsafeClientScriptsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientScriptsServer will
// result in compilation errors.
type UnsafeClientScriptsServer interface {
	mustEmbedUnimplementedClientScriptsServer()
}

func RegisterClientScriptsServer(s *grpc.Server, srv ClientScriptsServer) {
	s.RegisterService(&_ClientScripts_serviceDesc, srv)
}

func _ClientScripts_Bundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientScriptsServer).Bundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corredor.ClientScripts/Bundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientScriptsServer).Bundle(ctx, req.(*BundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientScripts_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientScriptListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientScriptsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corredor.ClientScripts/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientScriptsServer).List(ctx, req.(*ClientScriptListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientScripts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "corredor.ClientScripts",
	HandlerType: (*ClientScriptsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bundle",
			Handler:    _ClientScripts_Bundle_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ClientScripts_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service-corredor.proto",
}

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageClient interface {
}

type storageClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageClient(cc grpc.ClientConnInterface) StorageClient {
	return &storageClient{cc}
}

// StorageServer is the server API for Storage service.
// All implementations must embed UnimplementedStorageServer
// for forward compatibility
type StorageServer interface {
	mustEmbedUnimplementedStorageServer()
}

// UnimplementedStorageServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (UnimplementedStorageServer) mustEmbedUnimplementedStorageServer() {}

// UnsafeStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServer will
// result in compilation errors.
type UnsafeStorageServer interface {
	mustEmbedUnimplementedStorageServer()
}

func RegisterStorageServer(s *grpc.Server, srv StorageServer) {
	s.RegisterService(&_Storage_serviceDesc, srv)
}

var _Storage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "corredor.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "service-corredor.proto",
}
