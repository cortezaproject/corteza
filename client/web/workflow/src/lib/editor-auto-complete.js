export const EXPRESSION_EDITOR_AUTO_COMPLETE_VALUES = [
  { value: 'push(', caption: 'push(array, ...elements)' },
  { value: 'pop(', caption: 'pop(array)' },
  { value: 'shift(', caption: 'shift(array)' },
  { value: 'count(', caption: 'count(array, ...elements)' },
  { value: 'has(', caption: 'has(arr, ...elements)' },
  { value: 'hasAll(', caption: 'hasAll(arr, ...elements)' },
  { value: 'find(', caption: 'find(arr, elements)' },
  { value: 'sort(', caption: 'sort(array, descending)' },
  { value: 'splice(', caption: 'splice' },
  { value: 'min(', caption: 'min(...number)' },
  { value: 'max(', caption: 'max(...number)' },
  { value: 'round(', caption: 'round(number, places)' },
  { value: 'floor(', caption: 'floor(number)' },
  { value: 'ceil(', caption: 'ceil(number)' },
  { value: 'abs(', caption: 'abs(number)' },
  { value: 'log(', caption: 'log(number)' },
  { value: 'pow(', caption: 'pow(number, exp)' },
  { value: 'sqrt(', caption: 'sqrt(number)' },
  { value: 'sum(', caption: 'sum(...number)' },
  { value: 'average(', caption: 'average(...number)' },
  { value: 'random(', caption: 'random(a, b?)' },
  { value: 'int(', caption: 'int' },
  { value: 'float(', caption: 'float' },
  { value: 'toJSON(', caption: 'toJSON' },
  { value: 'trim(', caption: 'trim(string)' },
  { value: 'trimLeft(', caption: 'trimLeft(string, remove)' },
  { value: 'trimRight(', caption: 'trimRight(string, remove)' },
  { value: 'toLower(', caption: 'toLower(string)' },
  { value: 'toUpper(', caption: 'toUpper(string)' },
  { value: 'shortest(', caption: 'shortest(string1, ...strings)' },
  { value: 'longest(', caption: 'longest(arg1, arg2, ...arguments)' },
  { value: 'format(', caption: 'format(format, ...arguments)' },
  { value: 'title(', caption: 'title(string)' },
  { value: 'untitle(', caption: 'untitle(string)' },
  { value: 'isUrl(', caption: 'isUrl(string)' },
  { value: 'isEmail(', caption: 'isEmail(string)' },
  { value: 'split(', caption: 'split(string, separator)' },
  { value: 'join(', caption: 'join(strings, separator)' },
  { value: 'hasSubstring(', caption: 'hasSubstring(string, substring, case)' },
  { value: 'hasPrefix(', caption: 'hasPrefix(string, prefix)' },
  { value: 'hasSuffix(', caption: 'hasSuffix(string, prefix)' },
  { value: 'camelize(', caption: 'camelize(string)' },
  { value: 'snakify(', caption: 'snakify(string)' },
  { value: 'match(', caption: 'match(string, regex)' },
  { value: 'base64encode(', caption: 'base64encode(string)' },
  { value: 'unction(', caption: 'unction' },
  { value: 'set(', caption: 'set(kv, k, v)' },
  { value: 'merge(', caption: 'merge(kv, ...kv)' },
  { value: 'filter(', caption: 'filter(kv, ...include)' },
  { value: 'omit(', caption: 'omit(kv, ...exclude)' },
  { value: 'coalesce(', caption: 'coalesce(...Any)' },
  { value: 'isEmpty(', caption: 'isEmpty(Any)' },
  { value: 'isNil(', caption: 'isNil(Any)' },
  { value: 'length(', caption: 'length(array)' },
  { value: 'earliest(', caption: 'earliest(DateTime, ...DateTime)' },
  { value: 'latest(', caption: 'latest()' },
  { value: 'parseISOTime(', caption: 'parseISOTime()' },
  { value: 'modTime(', caption: 'modTime()' },
  { value: 'modDate(', caption: 'modDate(datetime, days)' },
  { value: 'modWeek(', caption: 'modWeek(datetime, weeks)' },
  { value: 'modMonth(', caption: 'modMonth(datetime, months)' },
  { value: 'modYear(', caption: 'modYear(datetime, years)' },
  { value: 'parseDuration(', caption: 'parseDuration()' },
  { value: 'strftime(', caption: 'strftime(datetime, pattern)' },
  { value: 'isLeapYear(', caption: 'isLeapYear(datetime)' },
  { value: 'now(', caption: 'now()' },
  { value: 'isWeekDay(', caption: 'isWeekDay()' },
  { value: 'sub(', caption: 'sub(from, to)' },
]
