// Code generated by statik. DO NOT EDIT.

package mysql

import (
	"github.com/rakyll/statik/fs"
)

func init() {
	data := "PK\x03\x04\x14\x00\x08\x00\x00\x00WBAM\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1a\x00	\x0020180704080000.base.up.sqlUT\x05\x00\x01g\xd8\xb1[-- all known organisations (crust instances) and our relation towards them\nCREATE TABLE organisations (\n  id               BIGINT UNSIGNED NOT NULL,\n  fqn              TEXT            NOT NULL, -- fully qualified name of the organisation\n  name             TEXT            NOT NULL, -- display name of the organisation\n\n  created_at       DATETIME        NOT NULL DEFAULT NOW(),\n  updated_at       DATETIME            NULL,\n  archived_at      DATETIME            NULL,\n  deleted_at       DATETIME            NULL, -- organisation soft delete\n\n  PRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n-- Keeps all known teams\nCREATE TABLE teams (\n  id               BIGINT UNSIGNED NOT NULL,\n  name             TEXT            NOT NULL, -- display name of the team\n  handle           TEXT            NOT NULL, -- team handle string\n\n  created_at       DATETIME        NOT NULL DEFAULT NOW(),\n  updated_at       DATETIME            NULL,\n  archived_at      DATETIME            NULL,\n  deleted_at       DATETIME            NULL, -- team soft delete\n\n  PRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n-- Keeps all known channels\nCREATE TABLE channels (\n  id               BIGINT UNSIGNED NOT NULL,\n  name             TEXT            NOT NULL, -- display name of the channel\n  topic            TEXT            NOT NULL,\n  meta             JSON            NOT NULL,\n\n  type             ENUM ('private', 'public', 'group') NOT NULL DEFAULT 'public',\n\n  rel_organisation BIGINT UNSIGNED NOT NULL REFERENCES organisation(id),\n  rel_creator      BIGINT UNSIGNED NOT NULL,\n\n  created_at       DATETIME        NOT NULL DEFAULT NOW(),\n  updated_at       DATETIME            NULL,\n  archived_at      DATETIME            NULL,\n  deleted_at       DATETIME            NULL, -- channel soft delete\n\n  rel_last_message BIGINT UNSIGNED NOT NULL DEFAULT 0,\n\n  PRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n-- Keeps team memberships\nCREATE TABLE team_members (\n  rel_team         BIGINT UNSIGNED NOT NULL REFERENCES organisation(id),\n  rel_user         BIGINT UNSIGNED NOT NULL,\n\n  PRIMARY KEY (rel_team, rel_user)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n-- handles channel membership\nCREATE TABLE channel_members (\n  rel_channel      BIGINT UNSIGNED NOT NULL REFERENCES channels(id),\n  rel_user         BIGINT UNSIGNED NOT NULL,\n\n  type             ENUM ('owner', 'member') NOT NULL DEFAULT 'member',\n\n  created_at       DATETIME        NOT NULL DEFAULT NOW(),\n  updated_at       DATETIME            NULL,\n\n  PRIMARY KEY (rel_channel, rel_user)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nCREATE TABLE channel_views (\n  rel_channel      BIGINT UNSIGNED NOT NULL REFERENCES channels(id),\n  rel_user         BIGINT UNSIGNED NOT NULL,\n\n  -- timestamp of last view, should be enough to find out which messaghr\n  viewed_at        DATETIME        NOT NULL DEFAULT NOW(),\n\n  -- new messages count since last view\n  new_since        INT    UNSIGNED NOT NULL DEFAULT 0,\n\n  PRIMARY KEY (rel_user, rel_channel)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nCREATE TABLE channel_pins (\n  rel_channel      BIGINT UNSIGNED NOT NULL REFERENCES channels(id),\n  rel_message      BIGINT UNSIGNED NOT NULL REFERENCES messages(id),\n  rel_user         BIGINT UNSIGNED NOT NULL,\n\n  created_at       DATETIME        NOT NULL DEFAULT NOW(),\n\n  PRIMARY KEY (rel_channel, rel_message)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nCREATE TABLE messages (\n  id               BIGINT UNSIGNED NOT NULL,\n  type             TEXT,\n  message          TEXT            NOT NULL,\n  meta             JSON,\n  rel_user         BIGINT UNSIGNED NOT NULL,\n  rel_channel      BIGINT UNSIGNED NOT NULL REFERENCES channels(id),\n  reply_to         BIGINT UNSIGNED     NULL REFERENCES messages(id),\n\n  created_at       DATETIME        NOT NULL DEFAULT NOW(),\n  updated_at       DATETIME            NULL,\n  deleted_at       DATETIME            NULL,\n\n  PRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nCREATE TABLE reactions (\n  id               BIGINT UNSIGNED NOT NULL,\n  rel_user         BIGINT UNSIGNED NOT NULL,\n  rel_message      BIGINT UNSIGNED NOT NULL REFERENCES messages(id),\n  rel_channel      BIGINT UNSIGNED NOT NULL REFERENCES channels(id),\n  reaction         TEXT            NOT NULL,\n\n  created_at       DATETIME        NOT NULL DEFAULT NOW(),\n\n  PRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nCREATE TABLE attachments (\n  id               BIGINT UNSIGNED NOT NULL,\n  rel_user         BIGINT UNSIGNED NOT NULL,\n\n  url              VARCHAR(512),\n  preview_url      VARCHAR(512),\n\n  size             INT    UNSIGNED,\n  mimetype         VARCHAR(255),\n  name             TEXT,\n\n  meta             JSON,\n\n  created_at       DATETIME        NOT NULL DEFAULT NOW(),\n  updated_at       DATETIME            NULL,\n  deleted_at       DATETIME            NULL,\n\n  PRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nCREATE TABLE message_attachment (\n  rel_message      BIGINT UNSIGNED NOT NULL REFERENCES messages(id),\n  rel_attachment   BIGINT UNSIGNED NOT NULL REFERENCES attachment(id),\n\n  PRIMARY KEY (rel_message)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nCREATE TABLE event_queue (\n  id               BIGINT UNSIGNED NOT NULL,\n  origin           BIGINT UNSIGNED NOT NULL,\n  subscriber       TEXT,\n  payload          JSON,\n\n  PRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nCREATE TABLE event_queue_synced (\n  origin           BIGINT UNSIGNED NOT NULL,\n  rel_last         BIGINT UNSIGNED NOT NULL,\n\n  PRIMARY KEY (origin)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\nPK\x07\x08x\x16\x11\x1f\x94\x15\x00\x00\x94\x15\x00\x00PK\x01\x02\x14\x03\x14\x00\x08\x00\x00\x00WBAMx\x16\x11\x1f\x94\x15\x00\x00\x94\x15\x00\x00\x1a\x00	\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x81\x00\x00\x00\x0020180704080000.base.up.sqlUT\x05\x00\x01g\xd8\xb1[PK\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00Q\x00\x00\x00\xe5\x15\x00\x00\x00\x00"
	fs.Register(data)
}
