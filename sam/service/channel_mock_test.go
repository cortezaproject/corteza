// Code generated by MockGen. DO NOT EDIT.
// Source: sam/service/channel.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	types "github.com/crusttech/crust/sam/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChannelService is a mock of ChannelService interface
type MockChannelService struct {
	ctrl     *gomock.Controller
	recorder *MockChannelServiceMockRecorder
}

// MockChannelServiceMockRecorder is the mock recorder for MockChannelService
type MockChannelServiceMockRecorder struct {
	mock *MockChannelService
}

// NewMockChannelService creates a new mock instance
func NewMockChannelService(ctrl *gomock.Controller) *MockChannelService {
	mock := &MockChannelService{ctrl: ctrl}
	mock.recorder = &MockChannelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChannelService) EXPECT() *MockChannelServiceMockRecorder {
	return m.recorder
}

// With mocks base method
func (m *MockChannelService) With(ctx context.Context) ChannelService {
	ret := m.ctrl.Call(m, "With", ctx)
	ret0, _ := ret[0].(ChannelService)
	return ret0
}

// With indicates an expected call of With
func (mr *MockChannelServiceMockRecorder) With(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockChannelService)(nil).With), ctx)
}

// FindByID mocks base method
func (m *MockChannelService) FindByID(channelID uint64) (*types.Channel, error) {
	ret := m.ctrl.Call(m, "FindByID", channelID)
	ret0, _ := ret[0].(*types.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockChannelServiceMockRecorder) FindByID(channelID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockChannelService)(nil).FindByID), channelID)
}

// Find mocks base method
func (m *MockChannelService) Find(filter *types.ChannelFilter) ([]*types.Channel, error) {
	ret := m.ctrl.Call(m, "Find", filter)
	ret0, _ := ret[0].([]*types.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockChannelServiceMockRecorder) Find(filter interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockChannelService)(nil).Find), filter)
}

// FindByMembership mocks base method
func (m *MockChannelService) FindByMembership() ([]*types.Channel, error) {
	ret := m.ctrl.Call(m, "FindByMembership")
	ret0, _ := ret[0].([]*types.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMembership indicates an expected call of FindByMembership
func (mr *MockChannelServiceMockRecorder) FindByMembership() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMembership", reflect.TypeOf((*MockChannelService)(nil).FindByMembership))
}

// Create mocks base method
func (m *MockChannelService) Create(channel *types.Channel) (*types.Channel, error) {
	ret := m.ctrl.Call(m, "Create", channel)
	ret0, _ := ret[0].(*types.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockChannelServiceMockRecorder) Create(channel interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChannelService)(nil).Create), channel)
}

// Update mocks base method
func (m *MockChannelService) Update(channel *types.Channel) (*types.Channel, error) {
	ret := m.ctrl.Call(m, "Update", channel)
	ret0, _ := ret[0].(*types.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockChannelServiceMockRecorder) Update(channel interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockChannelService)(nil).Update), channel)
}

// Archive mocks base method
func (m *MockChannelService) Archive(ID uint64) error {
	ret := m.ctrl.Call(m, "Archive", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Archive indicates an expected call of Archive
func (mr *MockChannelServiceMockRecorder) Archive(ID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Archive", reflect.TypeOf((*MockChannelService)(nil).Archive), ID)
}

// Unarchive mocks base method
func (m *MockChannelService) Unarchive(ID uint64) error {
	ret := m.ctrl.Call(m, "Unarchive", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unarchive indicates an expected call of Unarchive
func (mr *MockChannelServiceMockRecorder) Unarchive(ID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unarchive", reflect.TypeOf((*MockChannelService)(nil).Unarchive), ID)
}

// Delete mocks base method
func (m *MockChannelService) Delete(ID uint64) error {
	ret := m.ctrl.Call(m, "Delete", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockChannelServiceMockRecorder) Delete(ID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChannelService)(nil).Delete), ID)
}
