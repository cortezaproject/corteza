// Code generated by MockGen. DO NOT EDIT.
// Source: sam/service/message.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	types "github.com/crusttech/crust/sam/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMessageService is a mock of MessageService interface
type MockMessageService struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServiceMockRecorder
}

// MockMessageServiceMockRecorder is the mock recorder for MockMessageService
type MockMessageServiceMockRecorder struct {
	mock *MockMessageService
}

// NewMockMessageService creates a new mock instance
func NewMockMessageService(ctrl *gomock.Controller) *MockMessageService {
	mock := &MockMessageService{ctrl: ctrl}
	mock.recorder = &MockMessageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessageService) EXPECT() *MockMessageServiceMockRecorder {
	return m.recorder
}

// With mocks base method
func (m *MockMessageService) With(ctx context.Context) MessageService {
	ret := m.ctrl.Call(m, "With", ctx)
	ret0, _ := ret[0].(MessageService)
	return ret0
}

// With indicates an expected call of With
func (mr *MockMessageServiceMockRecorder) With(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockMessageService)(nil).With), ctx)
}

// Find mocks base method
func (m *MockMessageService) Find(filter *types.MessageFilter) (types.MessageSet, error) {
	ret := m.ctrl.Call(m, "Find", filter)
	ret0, _ := ret[0].(types.MessageSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockMessageServiceMockRecorder) Find(filter interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMessageService)(nil).Find), filter)
}

// Create mocks base method
func (m *MockMessageService) Create(messages *types.Message) (*types.Message, error) {
	ret := m.ctrl.Call(m, "Create", messages)
	ret0, _ := ret[0].(*types.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMessageServiceMockRecorder) Create(messages interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessageService)(nil).Create), messages)
}

// Update mocks base method
func (m *MockMessageService) Update(messages *types.Message) (*types.Message, error) {
	ret := m.ctrl.Call(m, "Update", messages)
	ret0, _ := ret[0].(*types.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockMessageServiceMockRecorder) Update(messages interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMessageService)(nil).Update), messages)
}

// React mocks base method
func (m *MockMessageService) React(messageID uint64, reaction string) error {
	ret := m.ctrl.Call(m, "React", messageID, reaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// React indicates an expected call of React
func (mr *MockMessageServiceMockRecorder) React(messageID, reaction interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "React", reflect.TypeOf((*MockMessageService)(nil).React), messageID, reaction)
}

// Unreact mocks base method
func (m *MockMessageService) Unreact(messageID uint64, reaction string) error {
	ret := m.ctrl.Call(m, "Unreact", messageID, reaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unreact indicates an expected call of Unreact
func (mr *MockMessageServiceMockRecorder) Unreact(messageID, reaction interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unreact", reflect.TypeOf((*MockMessageService)(nil).Unreact), messageID, reaction)
}

// Pin mocks base method
func (m *MockMessageService) Pin(messageID uint64) error {
	ret := m.ctrl.Call(m, "Pin", messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pin indicates an expected call of Pin
func (mr *MockMessageServiceMockRecorder) Pin(messageID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pin", reflect.TypeOf((*MockMessageService)(nil).Pin), messageID)
}

// Unpin mocks base method
func (m *MockMessageService) Unpin(messageID uint64) error {
	ret := m.ctrl.Call(m, "Unpin", messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unpin indicates an expected call of Unpin
func (mr *MockMessageServiceMockRecorder) Unpin(messageID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unpin", reflect.TypeOf((*MockMessageService)(nil).Unpin), messageID)
}

// Flag mocks base method
func (m *MockMessageService) Flag(messageID uint64) error {
	ret := m.ctrl.Call(m, "Flag", messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flag indicates an expected call of Flag
func (mr *MockMessageServiceMockRecorder) Flag(messageID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flag", reflect.TypeOf((*MockMessageService)(nil).Flag), messageID)
}

// Unflag mocks base method
func (m *MockMessageService) Unflag(messageID uint64) error {
	ret := m.ctrl.Call(m, "Unflag", messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unflag indicates an expected call of Unflag
func (mr *MockMessageServiceMockRecorder) Unflag(messageID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unflag", reflect.TypeOf((*MockMessageService)(nil).Unflag), messageID)
}

// Delete mocks base method
func (m *MockMessageService) Delete(ID uint64) error {
	ret := m.ctrl.Call(m, "Delete", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockMessageServiceMockRecorder) Delete(ID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMessageService)(nil).Delete), ID)
}
