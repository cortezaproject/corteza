// Code generated by MockGen. DO NOT EDIT.
// Source: sam/service/team.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	types "github.com/crusttech/crust/sam/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTeamService is a mock of TeamService interface
type MockTeamService struct {
	ctrl     *gomock.Controller
	recorder *MockTeamServiceMockRecorder
}

// MockTeamServiceMockRecorder is the mock recorder for MockTeamService
type MockTeamServiceMockRecorder struct {
	mock *MockTeamService
}

// NewMockTeamService creates a new mock instance
func NewMockTeamService(ctrl *gomock.Controller) *MockTeamService {
	mock := &MockTeamService{ctrl: ctrl}
	mock.recorder = &MockTeamServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTeamService) EXPECT() *MockTeamServiceMockRecorder {
	return m.recorder
}

// With mocks base method
func (m *MockTeamService) With(ctx context.Context) TeamService {
	ret := m.ctrl.Call(m, "With", ctx)
	ret0, _ := ret[0].(TeamService)
	return ret0
}

// With indicates an expected call of With
func (mr *MockTeamServiceMockRecorder) With(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockTeamService)(nil).With), ctx)
}

// FindByID mocks base method
func (m *MockTeamService) FindByID(teamID uint64) (*types.Team, error) {
	ret := m.ctrl.Call(m, "FindByID", teamID)
	ret0, _ := ret[0].(*types.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockTeamServiceMockRecorder) FindByID(teamID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockTeamService)(nil).FindByID), teamID)
}

// Find mocks base method
func (m *MockTeamService) Find(filter *types.TeamFilter) ([]*types.Team, error) {
	ret := m.ctrl.Call(m, "Find", filter)
	ret0, _ := ret[0].([]*types.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockTeamServiceMockRecorder) Find(filter interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockTeamService)(nil).Find), filter)
}

// Create mocks base method
func (m *MockTeamService) Create(team *types.Team) (*types.Team, error) {
	ret := m.ctrl.Call(m, "Create", team)
	ret0, _ := ret[0].(*types.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockTeamServiceMockRecorder) Create(team interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTeamService)(nil).Create), team)
}

// Update mocks base method
func (m *MockTeamService) Update(team *types.Team) (*types.Team, error) {
	ret := m.ctrl.Call(m, "Update", team)
	ret0, _ := ret[0].(*types.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockTeamServiceMockRecorder) Update(team interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTeamService)(nil).Update), team)
}

// Merge mocks base method
func (m *MockTeamService) Merge(teamID, targetTeamID uint64) error {
	ret := m.ctrl.Call(m, "Merge", teamID, targetTeamID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Merge indicates an expected call of Merge
func (mr *MockTeamServiceMockRecorder) Merge(teamID, targetTeamID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockTeamService)(nil).Merge), teamID, targetTeamID)
}

// Move mocks base method
func (m *MockTeamService) Move(teamID, organisationID uint64) error {
	ret := m.ctrl.Call(m, "Move", teamID, organisationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Move indicates an expected call of Move
func (mr *MockTeamServiceMockRecorder) Move(teamID, organisationID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockTeamService)(nil).Move), teamID, organisationID)
}

// Archive mocks base method
func (m *MockTeamService) Archive(ID uint64) error {
	ret := m.ctrl.Call(m, "Archive", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Archive indicates an expected call of Archive
func (mr *MockTeamServiceMockRecorder) Archive(ID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Archive", reflect.TypeOf((*MockTeamService)(nil).Archive), ID)
}

// Unarchive mocks base method
func (m *MockTeamService) Unarchive(ID uint64) error {
	ret := m.ctrl.Call(m, "Unarchive", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unarchive indicates an expected call of Unarchive
func (mr *MockTeamServiceMockRecorder) Unarchive(ID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unarchive", reflect.TypeOf((*MockTeamService)(nil).Unarchive), ID)
}

// Delete mocks base method
func (m *MockTeamService) Delete(ID uint64) error {
	ret := m.ctrl.Call(m, "Delete", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockTeamServiceMockRecorder) Delete(ID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTeamService)(nil).Delete), ID)
}
