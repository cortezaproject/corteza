namespace: crm
scripts:
  AccountCreateNewOpportunity:
    source: |-
      //Get the default settings
      return Compose.findRecordByID('96976273003249666', 'DefaultSettings').then(defaultSettings => {

        let opportunityCloseDays = defaultSettings.values.OpportunityCloseDateDays
        let opportunityProbability = defaultSettings.values.OpportunityProbability
        let opportunityForecaseCategory = defaultSettings.values.OpportunityForecaseCategory
        let opportunityStagename = defaultSettings.values.OpportunityStagename

        //Calculate the expiration date
        let m = new Date()
        m.setDate(m.getDate() + parseInt(opportunityCloseDays, 10))
        let closeDate = m.getUTCFullYear() + "/" + (m.getUTCMonth() + 1) + "/" + m.getUTCDate() + " " + m.getUTCHours() + ":" + m.getUTCMinutes() + ":" + m.getUTCSeconds()

        // Find the contact we want to link the new case to (by default, the primary contact)
        return Compose.findRecords(`AccountId = ${$record.recordID}`, 'Contact')

          .then(({ set, filter }) => {

            let ContactId, SuppliedName, SuppliedEmail, SuppliedPhone

            // Loop through the contacts of the account, to save the primary contact
            set.forEach(r => {

              //Check if it's the primary contact
              let contactIsPrimary = r.values.IsPrimary
              if (contactIsPrimary === '1') {

                //Add the contact
                ContactId = r.recordID
              }
            })

            // Create the related opportunity
            return Compose.makeRecord({
              'OwnerId': $record.values.OwnerId,
              'LeadSource': $record.values.LeadSource,
              'Name': '(unnamed)',
              'AccountId': $record.recordID,
              'IsClosed': 'No',
              'IsWon': 'No',
              'CloseDate': closeDate,
              'Probability': opportunityProbability,
              'ForecastCategory': opportunityForecaseCategory,
              'StageName': opportunityStagename
            }, 'Opportunity')

              .then(myOpportunity => {

                return Compose.saveRecord(myOpportunity)

              }).then(mySavedOpportunity => {

                //Create a new contact linked to the opportunity
                return Compose.makeRecord({
                  'ContactId': ContactId,
                  'OpportunityId': mySavedOpportunity.recordID,
                  'IsPrimary': '1'
                }, 'OpportunityContactRole')

                  .then(myOpportunityContactRole => {

                    return Compose.saveRecord(myOpportunityContactRole)

                      .then(() => {

                        // Notify current user
                        ComposeUI.success(`The new opportunity has been created.`)


                      }).then(() => {

                        // Go to the record
                        ComposeUI.gotoRecordEditor(mySavedOpportunity)

                      }).catch(err => {
                        // solve the problem
                        console.error(err)
                      })
                  }).catch(err => {
                    // solve the problem
                    console.error(err)
                  })
              }).catch(err => {
                // solve the problem
                console.error(err)
              })
          }).catch(err => {
            // solve the problem
            console.error(err)
          })
      }).catch(err => {
        // solve the problem
        console.error(err)
      })
    async: false
    runInUA: true
    critical: true
    enabled: true
    timeout: 0
    triggers:
    - event: manual
      resource: compose:record
  CaseInsertCaseNumber:
    source: |-
      //Get the default settings
      return Compose.findRecordByID('96976273003249666', 'DefaultSettings').then(defaultSettings => {
        
        // Map the case number
        let nextCaseNumber = defaultSettings.values.CaseNextNumber
        if (typeof nextCaseNumber == "undefined" || nextCaseNumber === '' || isNaN(nextCaseNumber)) {
          nextCaseNumber = 0
        }
        
        $record.values.CaseNumber = nextCaseNumber
        let nextCaseNumberUpdated = parseInt(nextCaseNumber,10) + 1
          
        // Update the config
        defaultSettings.values.CaseNextNumber = nextCaseNumberUpdated
        return Compose.saveRecord(defaultSettings).then(mySavedDefaultSettings => {
          
          console.log('Record saved, new ID', mySavedDefaultSettings.recordID)

        }).catch(err => {
        // solve the problem
        console.error(err)
        })
      }).catch(err => {
      // solve the problem
      console.error(err)
      })
    async: false
    runInUA: false
    critical: true
    enabled: true
    timeout: 0
    triggers:
    - enabled: false
      event: afterCreate
      module: Case
      resource: compose:record
    - event: beforeCreate
      module: Case
      resource: compose:record
  CaseInformContactOfSolution:
    source: |-
      // Check if the case is solved
      if (!$record.values.Status === 'Closed') {

        // Get the to address
        let to = $record.values.SuppliedEmail
        if (!to) {
          ComposeUI.warning(`There is no supplied email. Please fill in an email address in the supplied email field.`)
          return
        }

        // Get email body
        let html = "<h1>Solution of case: " + $record.values.CaseNumber + " - " + $record.values.Subject + "</h1>"
        html = html + "<br>"
        html = html + "<strong>Solution Title:</strong> " + $record.values.SolutionName + "<br>"
        html = html + "<strong>Solution Details:</strong> " + $record.values.SolutionNote

        // Send the email
        return Compose.sendMail(to, `Corteza - Quote: ${$record.values.QuoteNumber} - ${$record.values.Name}`, { html: html }).then(() => {
          ComposeUI.success(`The case solutoin has been sent via email.`)
        }).catch(err => {
          // solve the problem
          console.error(err)
        })
      } else {
        ComposeUI.warning(`You can only inform the client of a solution when the case status is "Closed".`)
        return
      }
    async: false
    runInUA: true
    critical: true
    enabled: true
    timeout: 0
    triggers:
    - event: manual
      resource: compose:record
  ContactSetRecordLabel:
    source: |-
      // Set the record label string
      let recordLabel = ''

      // Get the first name
      let firstName = $record.values.FirstName
      if (!firstName) {
        firstName = ''
      }

      // Get the last name
      let lastName = $record.values.LastName
      if (!lastName) {
        lastName = ''
      }

      // Create the full name
      let fullName = ''
      if ((firstName !== '') && (lastName === '')) {
        recordLabel = firstName
      }

      if ((firstName === '') && (lastName !== '')) {
        recordLabel = lastName
      }

      if ((firstName !== '') && (lastName !== '')) {
        recordLabel = firstName + ' ' + lastName
      }

      // Get the company name from the account
      // Check if there is a related account, to map the fields of the account
      let accountId = $record.values.AccountId
      if (accountId) {
          return Compose.findRecordByID(accountId, 'Account').then(accountRecord => {
          
            // Add to the record label 
            recordLabel = recordLabel + ' (' + accountRecord.values.AccountName + ')'
            $record.values.RecordLabel = recordLabel

          }).catch(err => {
            // solve the problem
            $record.values.RecordLabel = recordLabel

            console.error(err)
          })
        
      }
    async: false
    runInUA: false
    critical: true
    enabled: true
    timeout: 0
    triggers:
    - enabled: false
      event: afterCreate
      module: Contact
      resource: compose:record
    - enabled: false
      event: afterUpdate
      module: Contact
      resource: compose:record
    - event: beforeUpdate
      module: Contact
      resource: compose:record
    - event: beforeCreate
      module: Contact
      resource: compose:record
  LeadSetRecordLabel:
    source: |-
      // Set the record label string
      let recordLabel = ''

      // Get the first name
      let firstName = $record.values.FirstName
      if (!firstName) {
        fistName = ''
      }

      // Get the last name
      let lastName = $record.values.LastName
      if (!lastName) {
        lastName = ''
      }

      // Create the full name
      let fullName = ''
      if ((firstName !== '') && (lastName === '')) {
        recordLabel = firstName
      }

      if ((firstName === '') && (lastName !== '')) {
        recordLabel = lastName
      }

      if ((firstName !== '') && (lastName !== '')) {
        recordLabel = firstName + ' ' + lastName
      }

      // Get the company name
      let company = $record.values.Company
      if (!company) {
        company = ''
      }

      // Add the company name (if there is one)
      if (company !== '') {
        recordLabel = recordLabel + ' (' + company + ')'
      }

      // Set the label
      $record.values.RecordLabel = recordLabel
    async: false
    runInUA: false
    critical: true
    enabled: true
    timeout: 0
    triggers:
    - enabled: false
      event: afterCreate
      module: Lead
      resource: compose:record
    - enabled: false
      event: afterUpdate
      module: Lead
      resource: compose:record
    - event: beforeUpdate
      module: Lead
      resource: compose:record
    - event: beforeCreate
      module: Lead
      resource: compose:record
  QuoteApproveQuote:
    source: |-
      //Check if the quote has the correct status
      if ($record.values.Status !== 'In Review') {
        // Inform
        ComposeUI.warning(`A quote needs to have the status In Review in order to be approved.`)
        return true
      }

      //Change value
      $record.values.Status = 'Approved'

      return Compose.saveRecord($record)
        .then(mySavedRecord => {

          // Get the email of the owner
          return System.findUserByID($record.createdBy).then(user => {

            // Send the mail
            return Compose.sendMail(
              user.email,
              `Quote "${$record.values.Name}" has been approved`,
              { html: `The following quote has been approved: <br><br><a href="https://latest.cortezaproject.org/compose/ns/crm/pages/69625756459728913/record/${$record.recordID}/edit">${$record.values.Name}<a>` }
            )
          }).then(() => {

            // Notify current user
            ComposeUI.success(`The quote has been approved and the quote owner has been notified via email.`)

          })
        }).catch(err => {
          // solve the problem
          console.error(err)
        })
    async: false
    runInUA: true
    critical: true
    enabled: true
    timeout: 0
    triggers:
    - event: manual
      resource: compose:record
  SolutionInsertSolutionNumber:
    source: |-
      //Get the default settings
      return Compose.findRecordByID('96976273003249666', 'DefaultSettings').then(defaultSettings => {
        
        // Map the case number
        let nextSolutionNumber = defaultSettings.values.SolutionNextNumber
        if (typeof nextSolutionNumber == "undefined" || nextSolutionNumber === '' || isNaN(nextSolutionNumber)) {
          nextSolutionNumber = 0
        }
        $record.values.SolutionNumber = nextSolutionNumber
        let nextSolutionNumberUpdated = parseInt(nextSolutionNumber,10) + 1
        
        // Update the config
        defaultSettings.values.SolutionNextNumber = nextSolutionNumberUpdated
        
        return Compose.saveRecord(defaultSettings).then(mySavedDefaultSettings => {
          console.log('Record saved, new ID', mySavedDefaultSettings.recordID)
        }).catch(err => {
        // solve the problem
        console.error(err)
        })
        
      }).catch(err => {
        // solve the problem
        console.error(err)
      })
    async: false
    runInUA: false
    critical: true
    enabled: true
    timeout: 0
    triggers:
    - enabled: false
      event: afterCreate
      module: Solution
      resource: compose:record
    - event: beforeCreate
      module: Solution
      resource: compose:record
  AccountCreateNewContract:
    source: |-
      //Get the default settings
      return Compose.findRecordByID('96976273003249666', 'DefaultSettings').then(defaultSettings => {
        
        // Map the case number
        let ContractDefaultTime = defaultSettings.values.ContractDefaultTime

        // Get the contract number
        let nextContractNumber = defaultSettings.values.ContractNextNumber
        if (typeof nextContractNumber == "undefined" || nextContractNumber === '' || isNaN(nextContractNumber)) {
          nextContractNumber = 0
        }
        
        return Compose.makeRecord({
          'OwnerId' : $record.values.OwnerId,
          'AccountId' : $record.recordID,
          'Status' : 'Draft',
          'BillingStreet' : $record.values.BillingStreet,
          'BillingCity' : $record.values.BillingCity,
          'BillingState' : $record.values.BillingState,
          'BillingPostalCode' : $record.values.BillingPostalCode,
          'BillingCountry' : $record.values.BillingCountry,
          'ShippingStreet' : $record.values.BillingStreet,
          'ShippingCity' : $record.values.BillingCity,
          'ShippingState' : $record.values.BillingState,
          'ShippingPostalCode' : $record.values.BillingPostalCode,
          'ShippingCountry' : $record.values.BillingCountry,
          'ContractTerm' : ContractDefaultTime,
          'ContractNumber' : nextContractNumber
        }, 'Contract').then(myContract => {
          
          // return was missing here. Set tjhe mySavedCase below
          return Compose.saveRecord(myContract)
          
        }).then(mySavedContract => {
          let nextContractNumberUpdated = parseInt(nextContractNumber,10) + 1
        
          // Update the config
          defaultSettings.values.ContractNextNumber = nextContractNumberUpdated
          return Compose.saveRecord(defaultSettings).then(mySavedDefaultSettings => {
            
            console.log('Record saved, new ID', mySavedDefaultSettings.recordID)

          }).then(() => {

            // Notify current user
            ComposeUI.success(`The new contract record has been created.`)
            
          }).then(() => {

            // Go to the record
            ComposeUI.gotoRecordEditor(mySavedContract)
            
          }).catch(err => {
          // solve the problem
          console.error(err)
          })
        }).catch(err => {
        // solve the problem
        console.error(err)
        })
      }).catch(err => {
      // solve the problem
      console.error(err)
      })
    async: false
    runInUA: false
    critical: true
    enabled: true
    timeout: 0
    triggers:
    - event: manual
      resource: compose:record
  CaseSetStatusToWorking:
    source: |-
      // Update the status
      $record.values.Status = 'Working'
      let caseRecord = $record

      // Save the case
      return Compose.makeRecord({
        'CaseId' : caseRecord.recordID,
        'Description' : 'State set to "Working"',
        'Type' : 'State change'
      }, 'CaseUpdate').then(myCaseUpdate => {

        return Compose.saveRecord(myCaseUpdate)
        
      }).then(myCaseUpdate => {

        return Compose.saveRecord(caseRecord)

      }).catch(err => {
        // solve the problem
        console.error(err)
      })
    async: false
    runInUA: true
    critical: true
    enabled: true
    timeout: 0
    triggers:
    - event: manual
      resource: compose:record
  CaseSetStatusToClosed:
    source: |-
      // Check if the case is already closed
      if ($record.values.Status === 'Closed') {
        // Case is closed already. Exit
        ComposeUI.success(`This case is already closed.`)
        return true
      }

      // Check if there is a solution
      let SolutionName = $record.values.SolutionName
      let solutionRecord = $record.values.SolutionId

      // If there is no solution, show that it's not possible to close the case
      if ((!SolutionName) && (!solutionRecord)) {
        ComposeUI.warning(`Unable to close the case. Please add a solution name or select an existing solution before closing the case.`)
        return true
      }

      // Update the status
      $record.values.IsClosed = true
      var m = new Date()
      var dateString = m.getUTCFullYear() + "/" + (m.getUTCMonth() + 1) + "/" + m.getUTCDate() + " " + m.getUTCHours() + ":" + m.getUTCMinutes() + ":" + m.getUTCSeconds()
      $record.values.ClosedDate = dateString
      $record.values.Status = 'Closed'

      return Compose.saveRecord($record)
        .then(mySavedRecord => {

          // Create the CaseUpdate record
          return Compose.makeRecord({
            'Description': 'State set to "Closed',
            'Type': 'State change',
            'CaseId': $record.recordID
          }, 'CaseUpdate')

            .then(myCaseUpdate => {

              return Compose.saveRecord(myCaseUpdate)

            }).then(mySavedCaseUpdate => {

              // Check if a solution record has been selected
              if (solutionRecord) {

                // If there is a solution record, map the values in the case
                return Compose.findRecordByID(solutionRecord, 'Solution').then(solution => {
                  $record.values.SolutionName = solution.values.SolutionName
                  $record.values.SolutionNote = solution.values.SolutionNote
                  $record.values.SolutionFile = solution.values.File

                  return Compose.saveRecord($record)
                }).catch(err => {

                  // solve the problem
                  console.error(err)
                })
              } else {

                // If there is no solution record, check if the value "SubmitAsSolution" is checked. If so, save the solution as a Solution record
                if ($record.values.SubmitAsSolution) {

                  //Get the default settings
                  return Compose.findRecordByID('96976273003249666', 'DefaultSettings').then(defaultSettings => {

                    // Map the solution number
                    let nextSolutionNumber = defaultSettings.values.SolutionNextNumber
                    if (typeof nextSolutionNumber == "undefined" || nextSolutionNumber === '' || isNaN(nextSolutionNumber)) {
                      nextSolutionNumber = 0
                    }

                    // Create the Solution record
                    return Compose.makeRecord({
                      'SolutionName': $record.values.SolutionName,
                      'SolutionNote': $record.values.SolutionNote,
                      'File': $record.values.SolutionFile,
                      'Status': 'New',
                      'IsPublished': '1',
                      'CaseId': $record.recordID,
                      'SolutionNumber': nextSolutionNumber,
                      'ProductId': $record.values.ProductId
                    }, 'Solution')

                      .then(mySolution => {

                        return Compose.saveRecord(mySolution)

                      }).then(mySavedSolution => {

                        // Save the solution record in the case record
                        $record.values.SolutionId = mySavedSolution.recordID
                        return Compose.saveRecord($record)

                      }).then(mySavedSolution => {

                        let nextSolutionNumberUpdated = parseInt(nextSolutionNumber, 10) + 1

                        // Update the config
                        defaultSettings.values.SolutionNextNumber = nextSolutionNumberUpdated
                        return Compose.saveRecord(defaultSettings).then(mySavedDefaultSettings => {

                          console.log('Record saved, ID', mySavedDefaultSettings.recordID)


                        }).catch(err => {
                          // solve the problem
                          console.error(err)
                        })
                      }).catch(err => {
                        // solve the problem
                        console.error(err)
                      })
                  }).catch(err => {
                    // solve the problem
                    console.error(err)
                  })
                }
              }
            }).catch(err => {
              // solve the problem
              console.error(err)
            })
        }).catch(err => {
          // solve the problem
          console.error(err)
        })
    async: false
    runInUA: true
    critical: true
    enabled: true
    timeout: 0
    triggers:
    - event: manual
      resource: compose:record
  AccountCreateNewCase:
    source: |-
      //Get the default settings
      return Compose.findRecordByID('96976273003249666', 'DefaultSettings').then(defaultSettings => {
        
        // Map the case number
        let nextCaseNumber = defaultSettings.values.CaseNextNumber
        if (typeof nextCaseNumber == "undefined" || nextCaseNumber === '' || isNaN(nextCaseNumber)) {
          nextCaseNumber = 0
        }
        
        // Find the contact we want to link the new case to (by default, the primary contact)
        return Compose.findRecords(`AccountId = ${$record.recordID}`, 'Contact').then(({ set, filter }) => {
        
          let ContactId, SuppliedName, SuppliedEmail, SuppliedPhone

          // Loop through the contacts of the account, to save the primary contact
          set.forEach(r => {
            
            //Check if it's the primary contact
            let contactIsPrimary = r.values.IsPrimary
            console.log(contactIsPrimary)
            if (contactIsPrimary === '1') {
              
              //Add the contact
              ContactId = r.recordID
              SuppliedName = r.values.FirstName + ' ' + r.values.LastName
              SuppliedEmail = r.values.Email
              SuppliedPhone = r.values.Phone
            }
          })
          
          return Compose.makeRecord({
            'OwnerId' : $record.values.OwnerId,
            'Subject' : '(no subject)',
            'ContactId' : ContactId,
            'AccountId' : $record.recordID,
            'Status' : 'New',
            'Priority' : 'Low',
            'SuppliedName' : SuppliedName,
            'SuppliedEmail' : SuppliedEmail,
            'SuppliedPhone' : SuppliedPhone,
            'CaseNumber' : nextCaseNumber
          }, 'Case').then(myCase => {
            
            Compose.saveRecord(myCase)
            
          }).then(mySavedCase => {
            let nextCaseNumberUpdated = parseInt(nextCaseNumber,10) + 1
            
            // Update the config
            defaultSettings.values.CaseNextNumber = nextCaseNumberUpdated
            return Compose.saveRecord(defaultSettings).then(mySavedDefaultSettings => {
              
              console.log('Record saved, new ID', mySavedDefaultSettings.recordID)
        
            }).then(({ mySavedCase }) => {
        
              // Notify current user
              ComposeUI.success(`The new case has been created.`)
            
              
            }).then(({ mySavedCase }) => {
        
              // Go to the record
              ComposeUI.gotoRecordEditor(mySavedCase)
              
            }).catch(err => {
            // solve the problem
            console.error(err)
            })
          }).catch(err => {
          // solve the problem
          console.error(err)
          })
        }).catch(err => {
        // solve the problem
        console.error(err)
        })
      }).catch(err => {
      // solve the problem
      console.error(err)
      })
    async: false
    runInUA: false
    critical: true
    enabled: true
    timeout: 0
    triggers:
    - event: manual
      resource: compose:record
  ContactCreateNewCase:
    source: |-
      //Get the default settings
      return Compose.findRecordByID('96976273003249666', 'DefaultSettings').then(defaultSettings => {
        
        // Map the case number
        let nextCaseNumber = defaultSettings.values.CaseNextNumber
        if (typeof nextCaseNumber == "undefined" || nextCaseNumber === '' || isNaN(nextCaseNumber)) {
          nextCaseNumber = 0
        }
        
        return Compose.makeRecord({
          'OwnerId' : $record.values.OwnerId,
          'Subject' : '(no subject)',
          'ContactId' : $record.recordID,
          'AccountId' : $record.values.AccountId,
          'Status' : 'New',
          'Priority' : 'Low',
          'SuppliedName' : $record.values.FirstName + ' ' + $record.values.LastName,
          'SuppliedEmail' : $record.values.Email,
          'SuppliedPhone' : $record.values.Phone,
          'CaseNumber' : nextCaseNumber
        }, 'Case').then(myCase => {
          
          // return was missing here. Set tjhe mySavedCase below
          return Compose.saveRecord(myCase)
          
        }).then(mySavedCase => {
          let nextCaseNumberUpdated = parseInt(nextCaseNumber, 10) + 1
          
          // Update the config
          defaultSettings.values.CaseNextNumber = nextCaseNumberUpdated
          return Compose.saveRecord(defaultSettings).then(mySavedDefaultSettings => {
            
            console.log('Record saved, new ID', mySavedDefaultSettings.recordID)
            // then(({ mySavedCase }) wasn't needed, since it is already defined
            // for the entire block, starting at line 27
          }).then(() => {

            // Notify current user
            ComposeUI.success(`The new case has been created.`)
            
          }).then(() => {

            // Go to the record
            ComposeUI.gotoRecordEditor(mySavedCase)
            
          }).catch(err => {
          // solve the problem
          console.error(err)
          })
        }).catch(err => {
        // solve the problem
        console.error(err)
        })
      }).catch(err => {
      // solve the problem
      console.error(err)
      })
    async: false
    runInUA: true
    critical: true
    enabled: true
    timeout: 0
    triggers:
    - event: manual
      resource: compose:record
  LeadConvertLeadIntoAccount:
    source: |-
      if ($record.values.Status === 'Converted') {
        // Lead already converted. Inform user and exit
        ComposeUI.warning('This lead is already converted.')
        return true
      }

      // create new record of type/module Account and copy all values
      return Compose.makeRecord({
        'BillingStreet' : $record.values.Street,
        'BillingCity' : $record.values.City,
        'BillingState' : $record.values.State,
        'BillingPostalCode' : $record.values.PostalCode,
        'BillingCountry' : $record.values.Country,
        'AnnualRevenue' : $record.values.AnnualRevenue,
        'AccountName' : $record.values.Company,
        'Description' : $record.values.Description,
        'Fax' : $record.values.Fax,
        'Industry' : $record.values.Industry,
        'OwnerId' : $record.values.OwnerId,
        'AccountSource' : $record.values.LeadSource,
        'Phone' : $record.values.Phone,
        'NumberOfEmployees' : $record.values.NumberOfEmployees,
        'Rating' : $record.values.Rating,
        'Website' : $record.values.Website,
        'Twitter' : $record.values.Twitter,
        'Facebook' : $record.values.Facebook,
        'LinkedIn' : $record.values.LinkedIn
      }, 'Account').then(myAccount => {
        
        return Compose.saveRecord(myAccount)
        
      }).then(mySavedAccount => {

        // Create the related contact
        return Compose.makeRecord({
          'MailingStreet' : $record.values.Street,
          'MailingCity' : $record.values.City,
          'MailingState' : $record.values.State,
          'MailingPostalCode' : $record.values.PostalCode,
          'MailingCountry' : $record.values.Country,
          'Description' : $record.values.Description,
          'DoNotCall' : $record.values.DoNotCall,
          'Email' : $record.values.Email,
          'HasOptedOutOfEmail' : $record.values.HasOptedOutOfEmail,
          'Fax' : $record.values.Fax,
          'HasOptedOutOfFax' : $record.values.HasOptedOutOfFax,
          'OwnerId' : $record.values.OwnerId,
          'LeadSource' : $record.values.LeadSource,
          'Website' : $record.values.Website,
          'Twitter' : $record.values.Twitter,
          'Facebook' : $record.values.Facebook,
          'LinkedIn' : $record.values.LinkedIn,
          'Salutation' : $record.values.Salutation,
          'FirstName' : $record.values.FirstName,
          'LastName' : $record.values.LastName,
          'MobilePhone' : $record.values.MobilePhone,
          'Phone' : $record.values.Phone,
          'Title' : $record.values.Title,
          'IsPrimary' : '1',
          'AccountId' : mySavedAccount.recordID
        }, 'Contact').then(myContact => {
          
          return Compose.saveRecord(myContact)
          
        }).then(updatedAccount => {
          
          //Update the lead record
          $record.values.Status = 'Converted'
          $record.values.IsConverted = 'Yes'
          $record.values.ConvertedAccountId = mySavedAccount.recordID
          $record.values.ConvertedContactId = mySavedAccount.recordID
          $record.values.ConvertedDate = mySavedAccount.createdAt
        
          return Compose.saveRecord($record)
          
        }).then(leadUser => {
          
          return System.findUserByID($record.values.OwnerId).then(user => {
            
            // Notifies the owner that a new account was created and assigned to him
            Compose.sendRecordToMail(
              user.email,
              'Lead ' + $record.values.FirstName + ' ' + $record.values.LastName + ' from ' + $record.values.Company + ' has been converted',
              {
                header: '<h1>The following lead has been converted:</h1>'
              },
              mySavedAccount
            )
          }).catch(err => {
          // solve the problem
          console.error(err)
          })

        }).then(({ mySavedAccount }) => {
        
          // Notify current user
          ComposeUI.success(`The lead has been converted.`)
        
          
        }).then(({ mySavedAccount }) => {
        
          // Go to the record
          ComposeUI.gotoRecordEditor(mySavedAccount)
          
        }).catch(err => {
        // solve the problem
        console.error(err)
        })
      }).catch(err => {
      // solve the problem
      console.error(err)
      })
    async: false
    runInUA: false
    critical: true
    enabled: true
    timeout: 0
    triggers:
    - event: manual
      resource: compose:record
  LeadConvertLeadToAccountAndOpportunity:
    source: |-
      if ($record.values.Status === 'Converted') {
        // Lead already converted. Inform user and exit
        ComposeUI.warning('This lead is already converted.')
        return true
      }

      // create new record of type/module Account and copy all values
      return Compose.makeRecord({
        'BillingStreet' : $record.values.Street,
        'BillingCity' : $record.values.City,
        'BillingState' : $record.values.State,
        'BillingPostalCode' : $record.values.PostalCode,
        'BillingCountry' : $record.values.Country,
        'AnnualRevenue' : $record.values.AnnualRevenue,
        'AccountName' : $record.values.Company,
        'Description' : $record.values.Description,
        'Fax' : $record.values.Fax,
        'Industry' : $record.values.Industry,
        'OwnerId' : $record.values.OwnerId,
        'AccountSource' : $record.values.LeadSource,
        'Phone' : $record.values.Phone,
        'NumberOfEmployees' : $record.values.NumberOfEmployees,
        'Rating' : $record.values.Rating,
        'Website' : $record.values.Website,
        'Twitter' : $record.values.Twitter,
        'Facebook' : $record.values.Facebook,
        'LinkedIn' : $record.values.LinkedIn
      }, 'Account').then(myAccount => {
        
        return Compose.saveRecord(myAccount)
        
      }).then(mySavedAccount => {

        // Create the related contact
        return Compose.makeRecord({
          'MailingStreet' : $record.values.Street,
          'MailingCity' : $record.values.City,
          'MailingState' : $record.values.State,
          'MailingPostalCode' : $record.values.PostalCode,
          'MailingCountry' : $record.values.Country,
          'Description' : $record.values.Description,
          'DoNotCall' : $record.values.DoNotCall,
          'Email' : $record.values.Email,
          'HasOptedOutOfEmail' : $record.values.HasOptedOutOfEmail,
          'Fax' : $record.values.Fax,
          'HasOptedOutOfFax' : $record.values.HasOptedOutOfFax,
          'OwnerId' : $record.values.OwnerId,
          'LeadSource' : $record.values.LeadSource,
          'Website' : $record.values.Website,
          'Twitter' : $record.values.Twitter,
          'Facebook' : $record.values.Facebook,
          'LinkedIn' : $record.values.LinkedIn,
          'Salutation' : $record.values.Salutation,
          'FirstName' : $record.values.FirstName,
          'LastName' : $record.values.LastName,
          'MobilePhone' : $record.values.MobilePhone,
          'Phone' : $record.values.Phone,
          'Title' : $record.values.Title,
          'IsPrimary' : '1',
          'AccountId' : mySavedAccount.recordID
        }, 'Contact').then(mySavedContact => {
          
          return Compose.saveRecord(mySavedContact).then(mySavedContact => {
            
            // First get the default values
            //Get the default settings
            return Compose.findRecordByID('96976273003249666', 'DefaultSettings').then(defaultSettings => {
              
              let opportunityCloseDays = defaultSettings.values.OpportunityCloseDateDays
              let opportunityProbability = defaultSettings.values.OpportunityProbability
              let opportunityForecaseCategory = defaultSettings.values.OpportunityForecaseCategory
              let opportunityStagename = defaultSettings.values.OpportunityStagename
              
              //Calculate the expiration date
              let m = new Date()
              m.setDate(m.getDate() + parseInt(opportunityCloseDays,10))
              let closeDate = m.getUTCFullYear() +"/"+ (m.getUTCMonth()+1) +"/"+ m.getUTCDate() + " " + m.getUTCHours() + ":" + m.getUTCMinutes() + ":" + m.getUTCSeconds()
        
              // Create the related opportunity
              return Compose.makeRecord({
                'Description' : $record.values.Description,
                'OwnerId' : $record.values.OwnerId,
                'LeadSource' : $record.values.LeadSource,
                'Name' : '(unnamed)',
                'AccountId' : mySavedAccount.recordID,
                'IsClosed' : 'No',
                'IsWon' : 'No',
                'CloseDate' : closeDate,
                'Probability' : opportunityProbability,
                'ForecastCategory' : opportunityForecaseCategory,
                'StageName' : opportunityStagename
              }, 'Opportunity').then(myOpportunity => {
                return Compose.saveRecord(myOpportunity)
                
              }).then(mySavedOpportunity => {
              
                //Create a new contact linked to the opportunity
                return Compose.makeRecord({
                  'ContactId' : mySavedContact.recordID,
                  'OpportunityId' : mySavedOpportunity.recordID,
                  'IsPrimary' : '1'
                }, 'OpportunityContactRole').then(myOpportunityContactRole => {
                  return Compose.saveRecord(myOpportunityContactRole)
                  
                }).catch(err => {
                // solve the problem
                console.error(err)
                })
                
              }).catch(err => {
              // solve the problem
              console.error(err)
              })
              
            }).catch(err => {
            // solve the problem
            console.error(err)
            })
        
          }).catch(err => {
          // solve the problem
          console.error(err)
          })
        
        
        }).then(updatedAccount => {
          
          //Update the lead record
          $record.values.Status = 'Converted'
          $record.values.IsConverted = 'Yes'
          $record.values.ConvertedAccountId = mySavedAccount.recordID
          $record.values.ConvertedContactId = mySavedAccount.recordID
          $record.values.ConvertedDate = mySavedAccount.createdAt
        
          return Compose.saveRecord($record)
          
        }).then(leadUser => {
          
          return System.findUserByID($record.values.OwnerId).then(user => {
            
            // Notifies the owner that a new account was created and assigned to him
            Compose.sendRecordToMail(
              user.email,
              'Lead ' + $record.values.FirstName + ' ' + $record.values.LastName + ' from ' + $record.values.Company + ' has been converted',
              {
                header: '<h1>The following lead has been converted:</h1>'
              },
              mySavedAccount
            )
          }).catch(err => {
          // solve the problem
          console.error(err)
          })

        }).then(({ mySavedAccount }) => {
        
          // Notify current user
          ComposeUI.success(`The lead has been converted.`)
        
          
        }).then(({ mySavedAccount }) => {
        
          // Go to the record
          ComposeUI.gotoRecordEditor(mySavedAccount)
          
        }).catch(err => {
        // solve the problem
        console.error(err)
        })

      }).catch(err => {
      // solve the problem
      console.error(err)
      })

    async: false
    runInUA: false
    critical: true
    enabled: true
    timeout: 0
    triggers:
    - event: manual
      resource: compose:record
  QuoteSendQuoteToCustomEmail:
    source: |-
      // Get the to address
      let to = prompt("Please enter an email to send this quote to:")
      if (to === null || to === "") {
        ComposeUI.warning(`Please enter an email to send this quote to .`)
        return
      }

      let lineitems = ''
      Compose.findRecords(`QuoteId = ${$record.recordID}`, 'QuoteLineItem')

        .then(({ set, filter }) => {

          set.forEach(lineitem => {

            lineitems = lineitems + "Price:</strong> " + lineitem.values.UnitPrice + "<br>"
            lineitems = lineitems + "Quantity:</strong> " + lineitem.values.Quantity + "<br>"
            lineitems = lineitems + "Subtotal:</strong> " + lineitem.values.Subtotal + "<br>"
            lineitems = lineitems + "Discount:</strong> " + lineitem.values.Discount + "<br>"
            lineitems = lineitems + "Total Price:</strong> " + lineitem.values.TotalPrice + "<br>"
            lineitems = lineitems + "-------------------------<br>"      
          })
          return lineitems
        }).then(lineitems => {


          // Get email body
          let html = "<h1>Details of Quote: " + $record.values.QuoteNumber + " - " + $record.values.Name + "</h1>"
          html = html + "<br>"
          html = html + "<table border='1' cellpadding='1' cellspacing='1' style='min-width:100%;'>"
          html = html + "<tr>"
          html = html + "<td valign=top>"
          html = html + "<strong>Quote Information</strong><br>"
          html = html + "<br>"
          html = html + "<strong>Quote Number:</strong> " + $record.values.QuoteNumber + "<br>"
          html = html + "<strong>Quote Name:</strong> " + $record.values.Name + "<br>"
          html = html + "<strong>Expiration Date:</strong> " + $record.values.ExpirationDate + "<strong><br>"
          html = html + "<strong>Description:</strong> " + $record.values.Description
          html = html + "</td>"
          html = html + "<td valign=top>"
          html = html + "<strong>Primary contact data</strong><br>"
          html = html + "<br>"
          html = html + "<strong>Contact Name:</strong> " + $record.values.ContactId + "<br>"
          html = html + "<strong>Email:</strong> " + $record.values.Email + "<br>"
          html = html + "<strong>Phone:</strong> " + $record.values.Phone
          html = html + "</td>"
          html = html + "<td valign=top>"
          html = html + "<strong>Totals</strong><br>"
          html = html + "<br>"
          html = html + "<strong>Subtotal:</strong> " + $record.values.Subtotal + "<br>"
          html = html + "<strong>Additional Discount:</strong> " + $record.values.Discount + "<br>"
          html = html + "<strong>Shipping and Handling:</strong> " + $record.values.ShippingHandling + "<br>"
          html = html + "<strong>Total Price:</strong> " + $record.values.TotalPrice + "<br>"
          html = html + "<strong>Tax:</strong> " + $record.values.Tax + "<br>"
          html = html + "<strong>Grand Total:</strong> " + $record.values.GrandTotal
          html = html + "</td>"
          html = html + "</tr>"
          html = html + "<tr>"
          html = html + "<td colspan='3'>"
          html = html + "<strong>Products</strong><br>"
          html = html + "<br>"
          html = html + lineitems
          html = html + "</td>"
          html = html + "</tr>"
          html = html + "<tr>"
          html = html + "<td valign=top>"
          html = html + "<strong>Bill To</strong><br>"
          html = html + "<br>"
          html = html + "<strong>Bill to Name:</strong> " + $record.values.BillingName + "<br>"
          html = html + "<strong>Bill to Street:</strong> " + $record.values.BillingStreet + "<br>"
          html = html + "<strong>Bill to City:</strong> " + $record.values.BillingCity + "<br>"
          html = html + "<strong>Bill to State:</strong> " + $record.values.BillingState + "<strong><br>"
          html = html + "<strong>Bill to Postal Code:</strong> " + $record.values.BillingPostalCode + "<br>"
          html = html + "<strong>Bill to Country:</strong> " + $record.values.BillingCountry
          html = html + "</td>"
          html = html + "<td valign=top>"
          html = html + "<strong>Quote To</strong><br>"
          html = html + "<br>"
          html = html + "<strong>Quote to Name:</strong> " + $record.values.QuoteToName + "<br>"
          html = html + "<strong>Quote to Street:</strong> " + $record.values.QuoteToStreet + "<br>"
          html = html + "<strong>Quote to City:</strong> " + $record.values.QuoteToCity + "<br>"
          html = html + "<strong>Quote to State:</strong> " + $record.values.QuoteToState + "<strong><br>"
          html = html + "<strong>Quote to Postal Code:</strong> " + $record.values.QuoteToPostalCode + "<br>"
          html = html + "<strong>Quote to Country:</strong> " + $record.values.QuoteToCountry
          html = html + "</td>"
          html = html + "<td valign=top>"
          html = html + "<strong>Ship To</strong><br>"
          html = html + "<br>"
          html = html + "<strong>Ship to Name:</strong> " + $record.values.ShippingName + "<br>"
          html = html + "<strong>Ship to Street:</strong> " + $record.values.ShippingStreet + "<br>"
          html = html + "<strong>Ship to City:</strong> " + $record.values.ShippingCity + "<br>"
          html = html + "<strong>Ship to State:</strong> " + $record.values.ShippingState + "<strong><br>"
          html = html + "<strong>Ship to Postal Code:</strong> " + $record.values.ShippingPostalCode + "<br>"
          html = html + "<strong>Ship to Country:</strong> " + $record.values.ShippingCountry
          html = html + "</td>"
          html = html + "</tr>"
          html = html + "</table>"

          // Send the email
          return Compose.sendMail(to, `Corteza - Quote: ${$record.values.QuoteNumber} - ${$record.values.Name}`, { html: html }).then(() => {
            ComposeUI.success(`The quote has been sent via email.`)
          }).catch(err => {
            // solve the problem
            console.error(err)
          })
        }).catch(err => {
          // solve the problem
          console.error(err)
        })
    async: false
    runInUA: true
    critical: true
    enabled: true
    timeout: 0
    triggers:
    - event: manual
      resource: compose:record
  QuoteSendQuoteToPrimaryContact:
    source: |-
      // Get the to address
      let to = $record.values.Email
      if (!to) {
        ComposeUI.warning(`There is no email linked to the quote. Please fill in an email address in the "Primary contact data" block.`)
        return
      }

      let lineitems = ''
      Compose.findRecords(`QuoteId = ${$record.recordID}`, 'QuoteLineItem')

        .then(({ set, filter }) => {

          set.forEach(lineitem => {

            lineitems = lineitems + "Price:</strong> " + lineitem.values.UnitPrice + "<br>"
            lineitems = lineitems + "Quantity:</strong> " + lineitem.values.Quantity + "<br>"
            lineitems = lineitems + "Subtotal:</strong> " + lineitem.values.Subtotal + "<br>"
            lineitems = lineitems + "Discount:</strong> " + lineitem.values.Discount + "<br>"
            lineitems = lineitems + "Total Price:</strong> " + lineitem.values.TotalPrice + "<br>"
            lineitems = lineitems + "-------------------------<br>"      
          })
          return lineitems
        }).then(lineitems => {


          // Get email body
          let html = "<h1>Details of Quote: " + $record.values.QuoteNumber + " - " + $record.values.Name + "</h1>"
          html = html + "<br>"
          html = html + "<table border='1' cellpadding='1' cellspacing='1' style='min-width:100%;'>"
          html = html + "<tr>"
          html = html + "<td valign=top>"
          html = html + "<strong>Quote Information</strong><br>"
          html = html + "<br>"
          html = html + "<strong>Quote Number:</strong> " + $record.values.QuoteNumber + "<br>"
          html = html + "<strong>Quote Name:</strong> " + $record.values.Name + "<br>"
          html = html + "<strong>Expiration Date:</strong> " + $record.values.ExpirationDate + "<strong><br>"
          html = html + "<strong>Description:</strong> " + $record.values.Description
          html = html + "</td>"
          html = html + "<td valign=top>"
          html = html + "<strong>Primary contact data</strong><br>"
          html = html + "<br>"
          html = html + "<strong>Contact Name:</strong> " + $record.values.ContactId + "<br>"
          html = html + "<strong>Email:</strong> " + $record.values.Email + "<br>"
          html = html + "<strong>Phone:</strong> " + $record.values.Phone
          html = html + "</td>"
          html = html + "<td valign=top>"
          html = html + "<strong>Totals</strong><br>"
          html = html + "<br>"
          html = html + "<strong>Subtotal:</strong> " + $record.values.Subtotal + "<br>"
          html = html + "<strong>Additional Discount:</strong> " + $record.values.Discount + "<br>"
          html = html + "<strong>Shipping and Handling:</strong> " + $record.values.ShippingHandling + "<br>"
          html = html + "<strong>Total Price:</strong> " + $record.values.TotalPrice + "<br>"
          html = html + "<strong>Tax:</strong> " + $record.values.Tax + "<br>"
          html = html + "<strong>Grand Total:</strong> " + $record.values.GrandTotal
          html = html + "</td>"
          html = html + "</tr>"
          html = html + "<tr>"
          html = html + "<td colspan='3'>"
          html = html + "<strong>Products</strong><br>"
          html = html + "<br>"
          html = html + lineitems
          html = html + "</td>"
          html = html + "</tr>"
          html = html + "<tr>"
          html = html + "<td valign=top>"
          html = html + "<strong>Bill To</strong><br>"
          html = html + "<br>"
          html = html + "<strong>Bill to Name:</strong> " + $record.values.BillingName + "<br>"
          html = html + "<strong>Bill to Street:</strong> " + $record.values.BillingStreet + "<br>"
          html = html + "<strong>Bill to City:</strong> " + $record.values.BillingCity + "<br>"
          html = html + "<strong>Bill to State:</strong> " + $record.values.BillingState + "<strong><br>"
          html = html + "<strong>Bill to Postal Code:</strong> " + $record.values.BillingPostalCode + "<br>"
          html = html + "<strong>Bill to Country:</strong> " + $record.values.BillingCountry
          html = html + "</td>"
          html = html + "<td valign=top>"
          html = html + "<strong>Quote To</strong><br>"
          html = html + "<br>"
          html = html + "<strong>Quote to Name:</strong> " + $record.values.QuoteToName + "<br>"
          html = html + "<strong>Quote to Street:</strong> " + $record.values.QuoteToStreet + "<br>"
          html = html + "<strong>Quote to City:</strong> " + $record.values.QuoteToCity + "<br>"
          html = html + "<strong>Quote to State:</strong> " + $record.values.QuoteToState + "<strong><br>"
          html = html + "<strong>Quote to Postal Code:</strong> " + $record.values.QuoteToPostalCode + "<br>"
          html = html + "<strong>Quote to Country:</strong> " + $record.values.QuoteToCountry
          html = html + "</td>"
          html = html + "<td valign=top>"
          html = html + "<strong>Ship To</strong><br>"
          html = html + "<br>"
          html = html + "<strong>Ship to Name:</strong> " + $record.values.ShippingName + "<br>"
          html = html + "<strong>Ship to Street:</strong> " + $record.values.ShippingStreet + "<br>"
          html = html + "<strong>Ship to City:</strong> " + $record.values.ShippingCity + "<br>"
          html = html + "<strong>Ship to State:</strong> " + $record.values.ShippingState + "<strong><br>"
          html = html + "<strong>Ship to Postal Code:</strong> " + $record.values.ShippingPostalCode + "<br>"
          html = html + "<strong>Ship to Country:</strong> " + $record.values.ShippingCountry
          html = html + "</td>"
          html = html + "</tr>"
          html = html + "</table>"

          // Send the email
          return Compose.sendMail(to, `Corteza - Quote: ${$record.values.QuoteNumber} - ${$record.values.Name}`, { html: html }).then(() => {
            ComposeUI.success(`The quote has been sent via email.`)
          }).catch(err => {
            // solve the problem
            console.error(err)
          })
        }).catch(err => {
          // solve the problem
          console.error(err)
        })
    async: false
    runInUA: true
    critical: true
    enabled: true
    timeout: 0
    triggers:
    - event: manual
      resource: compose:record
  QuoteSubmitQuoteForApproval:
    source: |-
      // Check if it can be reviewed
      if ($record.values.Status !== 'Draft' && $record.values.Status !== 'Needs Review') {
        crust.notify.ui.alert.warning('A quote needs to have the status Draft or Needs Review in order to be sent for approval')
        return true
      }

      // Set the status
      $record.values.Status = 'In Review'

      // Saves the quote and inform
      return Compose.saveRecord($record)
        .then(mySavedRecord => {

          // Get the email of the owner
          return System.findUserByID($record.createdBy).then(user => {

            // Send the mail
            return Compose.sendMail(
              user.email, //Change this to the email address of the person that needs to approve the quotes
              `Quote "${$record.values.Name}" needs approval`,
              { html: `The following quote needs approval: <br><br><a href="https://latest.cortezaproject.org/compose/ns/crm/pages/69625756459728913/record/${$record.recordID}/edit">${$record.values.Name}<a>` }
            )
          }).then(() => {

            // Notify current user
            ComposeUI.success(`The quote has been sent for approval.`)

          })
        }).catch(err => {
          // solve the problem
          console.error(err)
        })
    async: false
    runInUA: true
    critical: true
    enabled: true
    timeout: 0
    triggers:
    - event: manual
      resource: compose:record
  OpportunityGenerateNewQuote:
    source: |-
      // Check if there is a related account, to map the fields of the account
      if (!$record.values.AccountId) {

        // Exit when there is no account related to the opportunity.
        ComposeUI.warning('Please link the opportunity to an account before generating a quote')
        return
      }

      let quoteContactId
      let quoteEmail
      let quotePhone
      let quoteFax
      let quoteAccountId
      let quoteBillingStreet
      let quoteBillingCity
      let quoteBillingState
      let quoteBillingPostalCode
      let quoteBillingCountry
      let quoteBillingName
      let quoteToStreet
      let quoteToCity
      let quoteToState
      let quoteToPostalCode
      let quoteToCountry
      let quoteToName
      let quoteShippingStreet
      let quoteShippingCity
      let quoteShippingState
      let quoteShippingPostalCode
      let quoteShippingCountry
      let quoteShippingName
      let quoteExpirationDate
      let quoteNumber

      // Get the primary contact for the quote
      return Compose.findRecords(`OpportunityId = ${$record.recordID}`, 'OpportunityContactRole')

        .then(({ set, filter }) => {

          let primary_contact

          if (set.length === 1) {

            // Get the contact
            primary_contact = set[0]

          } else {

            // Loop through the contacts of the account, to save the primary contact
            set.forEach(r => {

              // Check if it's the primary contact
              let contactIsPrimary = r.values.IsPrimary
              if (contactIsPrimary === '1') {

                // Add the contact
                primary_contact = r
              }
            })
          }
          return primary_contact

        }).then(primary_contact => {

          // If we have the primary contact, continue to add it to the quote. Else, skip this block
          if (primary_contact) {

            // Get the contact data
            return Compose.findRecordByID(primary_contact.values.ContactId, 'Contact').then(contact => {

              quoteContactId = contact.recordID
              quoteEmail = contact.values.Email
              quotePhone = contact.values.Phone
              quoteFax = contact.values.Fax

            }).catch(err => {
              // solve the problem
              console.error(err)
            })
          }

        }).then(mySavedQuote => {

          // Get the related account
          return Compose.findRecordByID($record.values.AccountId, 'Account').then(account => {

            quoteAccountId = account.recordID,
              quoteBillingStreet = account.values.BillingStreet,
              quoteBillingCity = account.values.BillingCity,
              quoteBillingState = account.values.BillingState,
              quoteBillingPostalCode = account.values.BillingPostalCode,
              quoteBillingCountry = account.values.BillingCountry,
              quoteBillingName = account.values.AccountName,
              quoteToStreet = account.values.BillingStreet,
              quoteToCity = account.values.BillingCity,
              quoteToState = account.values.BillingState,
              quoteToPostalCode = account.values.BillingPostalCode,
              quoteToCountry = account.values.BillingCountry,
              quoteToName = account.values.AccountName,
              quoteShippingStreet = account.values.BillingStreet,
              quoteShippingCity = account.values.BillingCity,
              quoteShippingState = account.values.BillingState,
              quoteShippingPostalCode = account.values.BillingPostalCode,
              quoteShippingCountry = account.values.BillingCountry,
              quoteShippingName = account.values.AccountName

          }).catch(err => {
            // solve the problem
            console.error(err)
          })

        }).then(mySavedQuote => {

          // Get the default settings
          return Compose.findRecordByID('96976273003249666', 'DefaultSettings').then(defaultSettings => {

            // Get the expiration date
            let quoteExpirationDays = defaultSettings.values.QuoteExpirationDays

            // Calculate the expiration date
            let m = new Date()
            m.setDate(m.getDate() + parseInt(quoteExpirationDays, 10))
            let expirationDate = m.getUTCFullYear() + "/" + (m.getUTCMonth() + 1) + "/" + m.getUTCDate() + " " + m.getUTCHours() + ":" + m.getUTCMinutes() + ":" + m.getUTCSeconds()

            // Save the date
            quoteExpirationDate = expirationDate

            // Map the quote number
            let nextQuoteNumber = defaultSettings.values.QuoteNextNumber
            if (typeof nextQuoteNumber == "undefined" || nextQuoteNumber === '' || isNaN(nextQuoteNumber)) {
              nextQuoteNumber = 0
            }
            quoteNumber = nextQuoteNumber
            let nextQuoteNumberUpdated = parseInt(nextQuoteNumber, 10) + 1

            // Update the config
            defaultSettings.values.QuoteNextNumber = nextQuoteNumberUpdated
            return Compose.saveRecord(defaultSettings).then(mySavedDefaultSettings => {

              console.log('Record saved, ID', mySavedDefaultSettings.recordID)

            }).catch(err => {
              // solve the problem
              console.error(err)
            })

          }).then(mySavedQuote => {

            // Create a new quote record for the opportunity
            return Compose.makeRecord({
              'ShippingHandling': 0,
              'Status': 'Draft',
              'Discount': 0,
              'Tax': 0,
              'OpportunityId': $record.recordID,
              'GrandTotal': $record.values.Amount,
              'PricebookId': $record.values.PricebookId,
              'Name': $record.values.Name,
              'Subtotal': $record.values.Amount,
              'TotalPrice': $record.values.Amount,
              'ContactId': quoteContactId,
              'Email': quoteEmail,
              'Phone': quotePhone,
              'Fax': quoteFax,
              'AccountId': quoteAccountId,
              'BillingStreet': quoteBillingStreet,
              'BillingCity': quoteBillingCity,
              'BillingState': quoteBillingState,
              'BillingPostalCode': quoteBillingPostalCode,
              'BillingCountry': quoteBillingCountry,
              'BillingName': quoteBillingName,
              'QuoteToStreet': quoteToStreet,
              'QuoteToCity': quoteToCity,
              'QuoteToState': quoteToState,
              'QuoteToPostalCode': quoteToPostalCode,
              'QuoteToCountry': quoteToCountry,
              'QuoteToName': quoteToName,
              'ShippingStreet': quoteShippingStreet,
              'ShippingCity': quoteShippingCity,
              'ShippingState': quoteShippingState,
              'ShippingPostalCode': quoteShippingPostalCode,
              'ShippingCountry': quoteShippingCountry,
              'ShippingName': quoteShippingName,
              'ExpirationDate': quoteExpirationDate,
              'QuoteNumber': quoteNumber
            }, 'Quote')

              .then(myQuote => {

                return Compose.saveRecord(myQuote)

                  .then(mySavedQuote => {

                    // Get the list of products from the opportunity to the quote
                    return Compose.findRecords(`OpportunityId = ${$record.recordID}`, 'OpportunityLineItem')

                      .then(({ set, filter }) => {

                        // Loop through the lineitems related to the opportunity
                        set.forEach(r => {

                          // Create a new contact linked to the opportunity
                          return Compose.makeRecord({
                            'Discount': r.values.Discount,
                            'Description': r.values.Description,
                            'ListPrice': r.values.ListPrice,
                            'PricebookEntryId': r.values.PricebookEntryId,
                            'ProductId': r.values.ProductId,
                            'ProductCode': r.values.ProductCode,
                            'Quantity': r.values.Quantity,
                            'UnitPrice': r.values.UnitPrice,
                            'Subtotal': r.values.Subtotal,
                            'TotalPrice': r.values.TotalPrice,
                            'QuoteId': mySavedQuote.recordID
                          }, 'QuoteLineItem')

                            .then(myQuoteLineItem => {

                              return Compose.saveRecord(myQuoteLineItem)

                            }).catch(err => {
                              // solve the problem
                              console.error(err)
                            })
                        })
                      })

                  }).then(() => {

                    // Notify current user
                    ComposeUI.success(`The new quote has been created.`)


                  }).then(() => {

                    // Go to the record
                    ComposeUI.gotoRecordEditor(mySavedQuote)

                  }).catch(err => {
                    // solve the problem
                    console.error(err)
                  })
              }).catch(err => {
                // solve the problem
                console.error(err)
              })
          }).catch(err => {
            // solve the problem
            console.error(err)
          })
        }).catch(err => {
          // solve the problem
          console.error(err)
        })
    async: false
    runInUA: true
    critical: true
    enabled: true
    timeout: 0
    triggers:
    - event: manual
      resource: compose:record
  QuoteUpdateTotalPrice:
    source: |-
      // Get the subtotal
      let subtotal = parseFloat($record.values.Subtotal)

      // Apply additional quote discount
      let discount = $record.values.Discount
      if (!discount || discount === '' || isNaN(discount)) {
        discount = 0
      }
      let totalPrice = subtotal - parseFloat(discount)

      // Calculate if it's not below 0
      if (totalPrice < 0) {
        totalPrice = 0
      }

      // Apply shipping
      let shippingHandling = $record.values.ShippingHandling
      if (!shippingHandling || shippingHandling === '' || isNaN(shippingHandling)) {
        shippingHandling = 0
      }
      totalPrice = totalPrice + parseFloat(shippingHandling)

      // Add totalPrice to the record
      $record.values.TotalPrice = totalPrice

      // Apply taxes
      let tax = $record.values.Tax
      if (!shippingHandling || shippingHandling === '' || isNaN(shippingHandling)) {
        // No tax, so don't do anything
        $record.values.GrandTotal = totalPrice
      } else {
        if (tax > 0) {
          // Apply tax
          let taxpercent = parseFloat(tax / 100);
          $record.values.GrandTotal = totalPrice * (1 + taxpercent)
        }
      }
    async: false
    runInUA: false
    critical: true
    enabled: true
    timeout: 0
    triggers:
    - event: afterUpdate
      module: Quote
      resource: compose:record
  OpportunityApplyPriceBook:
    source: |-
      // Get the current price book
      let pricebookId = $record.values.PricebookId

      // Check if there is a price book. If there isn't one, find the standard one
      if (!pricebookId) {

        //If there is no price book selected, get the default price book.
        return Compose.findRecords('IsActive = 1', 'Pricebook')

          .then(({ set, filter }) => {

            if (set.length === 0) {

              // return that there are no Price books in the CRM
              ComposeUI.warning(`There are no active price books configured in the CRM. Please insert an active price book in the Price book module.`)

            } else {

              // Loop through the price books, to find the standard one
              set.forEach(r => {

                //Check if the price book is the standard one
                if (r.values.IsStandard === '1') {

                  //Get the price book id
                  pricebookId = r.recordID
                }
              })

              if (pricebookId) {

                //Save the price book in the opportunity
                $record.values.PricebookId = pricebookId

                // Save the price book in the opportunity
                return Compose.saveRecord($record)
              }
            }


          }).catch(err => {
            // solve the problem
            console.error(err)
          })
      }

      // Check if a price book is selected or if a standard price book has been found. If not, exit.
      if (!pricebookId) {
        ComposeUI.warning(`Please select a Price book for this opportunity first.`)
        return
      }

      //Set the total amount of the opportunity
      let amount = 0

      // Find all opportunity lineitems
      return Compose.findRecords(`OpportunityId = ${$record.recordID}`, 'OpportunityLineItem')

        .then(({ set, filter }) => {

          set.forEach(lineitem => {

            //Set the default values
            let quantity = lineitem.values.Quantity
            let discount = lineitem.values.Discount
            let listprice = 0
            let unitprice = 0
            let subtotal = 0
            let totalprice = 0

            // Get the product
            return Compose.findRecordByID(lineitem.values.ProductId, 'Product').then(product => {

              // Set the product name and code
              lineitem.values.Name = product.values.Name
              lineitem.values.ProductCode = product.values.ProductCode

            }).then(product => {

              // Get the right price from the selected price book
              return Compose.findRecords(`PricebookId = ${pricebookId} AND ProductId = ${lineitem.values.ProductId}`, 'PricebookEntry')

                .then(({ set, filter }) => {

                  if (set.length > 0) {

                    let pricebookEntry = set[0]

                    // Get the list price
                    listprice = pricebookEntry.values.UnitPrice

                    // Update unitprice only when the value is empty
                    unitprice = lineitem.values.UnitPrice
                    if (!unitprice || unitprice === '' || isNaN(unitprice)) {
                      unitprice = listprice
                    }

                    // Calculate the totals
                    if (!quantity || quantity === '' || isNaN(quantity)) {
                      quantity = 0
                    }
                    subtotal = unitprice * quantity

                    // Calculate the total
                    if (!discount || discount === '' || isNaN(discount)) {
                      totalprice = subtotal
                    } else {
                      totalprice = subtotal - discount
                    }

                    // Update it in the listitem record
                    lineitem.values.ListPrice = listprice
                    lineitem.values.UnitPrice = unitprice
                    lineitem.values.Subtotal = subtotal
                    lineitem.values.TotalPrice = totalprice

                    //Add the total price to the amount of the opportunity
                    amount = amount + totalprice

                    // Save the lineitem
                    return Compose.saveRecord(lineitem)
                  }
                }).then(mySolution => {

                  //Save the opportunity record
                  $record.values.Amount = amount
                  return Compose.saveRecord($record)
                }).catch(err => {
                  // solve the problem
                  console.error(err)
                })

            }).catch(err => {
              // solve the problem
              console.error(err)
            })
          }).catch(err => {
            // solve the problem
            console.error(err)
          })
        }).catch(err => {
          // solve the problem
          console.error(err)
        })
    async: false
    runInUA: true
    critical: true
    enabled: true
    timeout: 0
    triggers:
    - event: manual
      resource: compose:record
