// Code generated by protoc-gen-go. DO NOT EDIT.
// source: script_runner.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RunTestRequest struct {
	Source               string   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunTestRequest) Reset()         { *m = RunTestRequest{} }
func (m *RunTestRequest) String() string { return proto.CompactTextString(m) }
func (*RunTestRequest) ProtoMessage()    {}
func (*RunTestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62210b9e3e4a7a06, []int{0}
}

func (m *RunTestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunTestRequest.Unmarshal(m, b)
}
func (m *RunTestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunTestRequest.Marshal(b, m, deterministic)
}
func (m *RunTestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunTestRequest.Merge(m, src)
}
func (m *RunTestRequest) XXX_Size() int {
	return xxx_messageInfo_RunTestRequest.Size(m)
}
func (m *RunTestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunTestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunTestRequest proto.InternalMessageInfo

func (m *RunTestRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *RunTestRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RunNamespaceRequest struct {
	Config               map[string]string `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Script               *Script           `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	Namespace            *Namespace        `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RunNamespaceRequest) Reset()         { *m = RunNamespaceRequest{} }
func (m *RunNamespaceRequest) String() string { return proto.CompactTextString(m) }
func (*RunNamespaceRequest) ProtoMessage()    {}
func (*RunNamespaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62210b9e3e4a7a06, []int{1}
}

func (m *RunNamespaceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunNamespaceRequest.Unmarshal(m, b)
}
func (m *RunNamespaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunNamespaceRequest.Marshal(b, m, deterministic)
}
func (m *RunNamespaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunNamespaceRequest.Merge(m, src)
}
func (m *RunNamespaceRequest) XXX_Size() int {
	return xxx_messageInfo_RunNamespaceRequest.Size(m)
}
func (m *RunNamespaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunNamespaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunNamespaceRequest proto.InternalMessageInfo

func (m *RunNamespaceRequest) GetConfig() map[string]string {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *RunNamespaceRequest) GetScript() *Script {
	if m != nil {
		return m.Script
	}
	return nil
}

func (m *RunNamespaceRequest) GetNamespace() *Namespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

type RunModuleRequest struct {
	Config               map[string]string `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Script               *Script           `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	Namespace            *Namespace        `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Module               *Module           `protobuf:"bytes,4,opt,name=module,proto3" json:"module,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RunModuleRequest) Reset()         { *m = RunModuleRequest{} }
func (m *RunModuleRequest) String() string { return proto.CompactTextString(m) }
func (*RunModuleRequest) ProtoMessage()    {}
func (*RunModuleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62210b9e3e4a7a06, []int{2}
}

func (m *RunModuleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunModuleRequest.Unmarshal(m, b)
}
func (m *RunModuleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunModuleRequest.Marshal(b, m, deterministic)
}
func (m *RunModuleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunModuleRequest.Merge(m, src)
}
func (m *RunModuleRequest) XXX_Size() int {
	return xxx_messageInfo_RunModuleRequest.Size(m)
}
func (m *RunModuleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunModuleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunModuleRequest proto.InternalMessageInfo

func (m *RunModuleRequest) GetConfig() map[string]string {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *RunModuleRequest) GetScript() *Script {
	if m != nil {
		return m.Script
	}
	return nil
}

func (m *RunModuleRequest) GetNamespace() *Namespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *RunModuleRequest) GetModule() *Module {
	if m != nil {
		return m.Module
	}
	return nil
}

type RunRecordRequest struct {
	Config               map[string]string `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Script               *Script           `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	Namespace            *Namespace        `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Module               *Module           `protobuf:"bytes,4,opt,name=module,proto3" json:"module,omitempty"`
	Record               *Record           `protobuf:"bytes,5,opt,name=record,proto3" json:"record,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RunRecordRequest) Reset()         { *m = RunRecordRequest{} }
func (m *RunRecordRequest) String() string { return proto.CompactTextString(m) }
func (*RunRecordRequest) ProtoMessage()    {}
func (*RunRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62210b9e3e4a7a06, []int{3}
}

func (m *RunRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunRecordRequest.Unmarshal(m, b)
}
func (m *RunRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunRecordRequest.Marshal(b, m, deterministic)
}
func (m *RunRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunRecordRequest.Merge(m, src)
}
func (m *RunRecordRequest) XXX_Size() int {
	return xxx_messageInfo_RunRecordRequest.Size(m)
}
func (m *RunRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunRecordRequest proto.InternalMessageInfo

func (m *RunRecordRequest) GetConfig() map[string]string {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *RunRecordRequest) GetScript() *Script {
	if m != nil {
		return m.Script
	}
	return nil
}

func (m *RunRecordRequest) GetNamespace() *Namespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *RunRecordRequest) GetModule() *Module {
	if m != nil {
		return m.Module
	}
	return nil
}

func (m *RunRecordRequest) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type RunTestResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunTestResponse) Reset()         { *m = RunTestResponse{} }
func (m *RunTestResponse) String() string { return proto.CompactTextString(m) }
func (*RunTestResponse) ProtoMessage()    {}
func (*RunTestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62210b9e3e4a7a06, []int{4}
}

func (m *RunTestResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunTestResponse.Unmarshal(m, b)
}
func (m *RunTestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunTestResponse.Marshal(b, m, deterministic)
}
func (m *RunTestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunTestResponse.Merge(m, src)
}
func (m *RunTestResponse) XXX_Size() int {
	return xxx_messageInfo_RunTestResponse.Size(m)
}
func (m *RunTestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunTestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunTestResponse proto.InternalMessageInfo

type RunNamespaceResponse struct {
	Namespace            *Namespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RunNamespaceResponse) Reset()         { *m = RunNamespaceResponse{} }
func (m *RunNamespaceResponse) String() string { return proto.CompactTextString(m) }
func (*RunNamespaceResponse) ProtoMessage()    {}
func (*RunNamespaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62210b9e3e4a7a06, []int{5}
}

func (m *RunNamespaceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunNamespaceResponse.Unmarshal(m, b)
}
func (m *RunNamespaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunNamespaceResponse.Marshal(b, m, deterministic)
}
func (m *RunNamespaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunNamespaceResponse.Merge(m, src)
}
func (m *RunNamespaceResponse) XXX_Size() int {
	return xxx_messageInfo_RunNamespaceResponse.Size(m)
}
func (m *RunNamespaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunNamespaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunNamespaceResponse proto.InternalMessageInfo

func (m *RunNamespaceResponse) GetNamespace() *Namespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

type RunModuleResponse struct {
	Module               *Module  `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunModuleResponse) Reset()         { *m = RunModuleResponse{} }
func (m *RunModuleResponse) String() string { return proto.CompactTextString(m) }
func (*RunModuleResponse) ProtoMessage()    {}
func (*RunModuleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62210b9e3e4a7a06, []int{6}
}

func (m *RunModuleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunModuleResponse.Unmarshal(m, b)
}
func (m *RunModuleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunModuleResponse.Marshal(b, m, deterministic)
}
func (m *RunModuleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunModuleResponse.Merge(m, src)
}
func (m *RunModuleResponse) XXX_Size() int {
	return xxx_messageInfo_RunModuleResponse.Size(m)
}
func (m *RunModuleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunModuleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunModuleResponse proto.InternalMessageInfo

func (m *RunModuleResponse) GetModule() *Module {
	if m != nil {
		return m.Module
	}
	return nil
}

type RunRecordResponse struct {
	Record               *Record  `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunRecordResponse) Reset()         { *m = RunRecordResponse{} }
func (m *RunRecordResponse) String() string { return proto.CompactTextString(m) }
func (*RunRecordResponse) ProtoMessage()    {}
func (*RunRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62210b9e3e4a7a06, []int{7}
}

func (m *RunRecordResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunRecordResponse.Unmarshal(m, b)
}
func (m *RunRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunRecordResponse.Marshal(b, m, deterministic)
}
func (m *RunRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunRecordResponse.Merge(m, src)
}
func (m *RunRecordResponse) XXX_Size() int {
	return xxx_messageInfo_RunRecordResponse.Size(m)
}
func (m *RunRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunRecordResponse proto.InternalMessageInfo

func (m *RunRecordResponse) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type Script struct {
	Source               string   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Timeout              uint32   `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Async                bool     `protobuf:"varint,4,opt,name=async,proto3" json:"async,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Script) Reset()         { *m = Script{} }
func (m *Script) String() string { return proto.CompactTextString(m) }
func (*Script) ProtoMessage()    {}
func (*Script) Descriptor() ([]byte, []int) {
	return fileDescriptor_62210b9e3e4a7a06, []int{8}
}

func (m *Script) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Script.Unmarshal(m, b)
}
func (m *Script) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Script.Marshal(b, m, deterministic)
}
func (m *Script) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Script.Merge(m, src)
}
func (m *Script) XXX_Size() int {
	return xxx_messageInfo_Script.Size(m)
}
func (m *Script) XXX_DiscardUnknown() {
	xxx_messageInfo_Script.DiscardUnknown(m)
}

var xxx_messageInfo_Script proto.InternalMessageInfo

func (m *Script) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Script) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Script) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *Script) GetAsync() bool {
	if m != nil {
		return m.Async
	}
	return false
}

func init() {
	proto.RegisterType((*RunTestRequest)(nil), "compose.RunTestRequest")
	proto.RegisterType((*RunNamespaceRequest)(nil), "compose.RunNamespaceRequest")
	proto.RegisterMapType((map[string]string)(nil), "compose.RunNamespaceRequest.ConfigEntry")
	proto.RegisterType((*RunModuleRequest)(nil), "compose.RunModuleRequest")
	proto.RegisterMapType((map[string]string)(nil), "compose.RunModuleRequest.ConfigEntry")
	proto.RegisterType((*RunRecordRequest)(nil), "compose.RunRecordRequest")
	proto.RegisterMapType((map[string]string)(nil), "compose.RunRecordRequest.ConfigEntry")
	proto.RegisterType((*RunTestResponse)(nil), "compose.RunTestResponse")
	proto.RegisterType((*RunNamespaceResponse)(nil), "compose.RunNamespaceResponse")
	proto.RegisterType((*RunModuleResponse)(nil), "compose.RunModuleResponse")
	proto.RegisterType((*RunRecordResponse)(nil), "compose.RunRecordResponse")
	proto.RegisterType((*Script)(nil), "compose.Script")
}

func init() { proto.RegisterFile("script_runner.proto", fileDescriptor_62210b9e3e4a7a06) }

var fileDescriptor_62210b9e3e4a7a06 = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xdd, 0x8a, 0x13, 0x31,
	0x14, 0x26, 0xd3, 0x76, 0x6a, 0x4f, 0x57, 0xbb, 0x9b, 0x5d, 0x34, 0x0e, 0x0a, 0xcb, 0x80, 0xd8,
	0xab, 0x41, 0xea, 0x8d, 0x2b, 0x2b, 0x8a, 0x22, 0xec, 0x8d, 0x5e, 0x44, 0xaf, 0xbc, 0x91, 0x71,
	0x1a, 0xa5, 0xd8, 0x49, 0xc6, 0x64, 0x22, 0xf4, 0x2d, 0xbc, 0xf1, 0x61, 0x7c, 0x28, 0xdf, 0x41,
	0x26, 0xc9, 0xfc, 0xa4, 0xb6, 0xa5, 0x52, 0x90, 0xbd, 0x9a, 0x39, 0x39, 0x5f, 0xbe, 0xe4, 0xfb,
	0x4e, 0xce, 0x81, 0x53, 0x95, 0xc9, 0x45, 0x51, 0x7e, 0x94, 0x9a, 0x73, 0x26, 0x93, 0x42, 0x8a,
	0x52, 0xe0, 0x61, 0x26, 0xf2, 0x42, 0x28, 0x16, 0x4d, 0x78, 0x9a, 0x33, 0x55, 0xa4, 0x19, 0xb3,
	0x99, 0xe8, 0x28, 0x17, 0x73, 0xbd, 0x6c, 0x22, 0xc9, 0x32, 0x21, 0xe7, 0x36, 0x8a, 0x2f, 0xe1,
	0x16, 0xd5, 0xfc, 0x3d, 0x53, 0x25, 0x65, 0xdf, 0x34, 0x53, 0x25, 0xbe, 0x0d, 0xa1, 0x12, 0x5a,
	0x66, 0x8c, 0xa0, 0x73, 0x34, 0x1d, 0x51, 0x17, 0x61, 0x0c, 0xfd, 0x8a, 0x98, 0x04, 0x66, 0xd5,
	0xfc, 0xc7, 0xbf, 0x11, 0x9c, 0x52, 0xcd, 0xdf, 0xd6, 0x07, 0xd6, 0x1c, 0x2f, 0x20, 0xcc, 0x04,
	0xff, 0xbc, 0xf8, 0x42, 0xd0, 0x79, 0x6f, 0x3a, 0x9e, 0x4d, 0x13, 0x77, 0xb9, 0x64, 0x03, 0x3a,
	0x79, 0x65, 0xa0, 0xaf, 0x79, 0x29, 0x57, 0xd4, 0xed, 0xc3, 0x0f, 0x21, 0xb4, 0x22, 0xcd, 0x79,
	0xe3, 0xd9, 0xa4, 0x61, 0x78, 0x67, 0x96, 0xa9, 0x4b, 0xe3, 0x47, 0x30, 0x6a, 0xf4, 0x92, 0x9e,
	0xc1, 0xe2, 0x06, 0xdb, 0x1e, 0xd5, 0x82, 0xa2, 0x0b, 0x18, 0x77, 0x4e, 0xc4, 0xc7, 0xd0, 0xfb,
	0xca, 0x56, 0x4e, 0x6c, 0xf5, 0x8b, 0xcf, 0x60, 0xf0, 0x3d, 0x5d, 0xea, 0x5a, 0xaa, 0x0d, 0x9e,
	0x06, 0x4f, 0x50, 0xfc, 0x23, 0x80, 0x63, 0xaa, 0xf9, 0x1b, 0xe3, 0x67, 0x2d, 0xf6, 0xd9, 0x9a,
	0xd8, 0x07, 0x5d, 0xb1, 0x1e, 0xf4, 0x3f, 0x2b, 0xad, 0xa8, 0x6d, 0xe9, 0x49, 0x7f, 0x8d, 0xda,
	0x5d, 0xcb, 0xa5, 0x0f, 0xb1, 0xe4, 0x97, 0xb5, 0x84, 0x9a, 0x47, 0xb5, 0x97, 0x25, 0x1e, 0xf4,
	0xba, 0x5a, 0x52, 0x01, 0x6d, 0xa3, 0x90, 0xc1, 0x1a, 0xd0, 0xdd, 0xdf, 0xa5, 0x0f, 0xf1, 0xee,
	0x04, 0x26, 0x4d, 0xf3, 0xa9, 0x42, 0x70, 0xc5, 0xe2, 0x2b, 0x38, 0xf3, 0x5b, 0xc4, 0xae, 0xfb,
	0x4a, 0xd1, 0x1e, 0x4a, 0xe3, 0x4b, 0x38, 0xe9, 0xbc, 0x3f, 0x47, 0xd3, 0xca, 0x47, 0x3b, 0xe5,
	0xbb, 0xdd, 0x75, 0xa9, 0xda, 0xdd, 0xce, 0x13, 0xb4, 0xd3, 0x93, 0x78, 0x0e, 0xa1, 0xad, 0xd4,
	0xbf, 0x4c, 0x13, 0x4c, 0x60, 0x58, 0x2e, 0x72, 0x26, 0x74, 0x69, 0x6a, 0x79, 0x93, 0xd6, 0x61,
	0x65, 0x61, 0xaa, 0x56, 0x3c, 0x33, 0x45, 0xbb, 0x41, 0x6d, 0x30, 0xfb, 0x19, 0xc0, 0x91, 0x7b,
	0x10, 0x66, 0x10, 0xe2, 0x0b, 0xe8, 0x57, 0x66, 0xe2, 0x3b, 0xdd, 0xe7, 0xd6, 0x99, 0x6d, 0x11,
	0xf9, 0x3b, 0xe1, 0xa4, 0x5d, 0xc1, 0xa8, 0x71, 0x11, 0xdf, 0xdb, 0x35, 0xae, 0xa2, 0xfb, 0x5b,
	0xb2, 0x8e, 0xe9, 0x39, 0x84, 0xd6, 0x4b, 0x7c, 0x77, 0xeb, 0x20, 0x88, 0xa2, 0x4d, 0xa9, 0x96,
	0xc0, 0xda, 0xe9, 0x13, 0x78, 0x6d, 0xe3, 0x13, 0xf8, 0x65, 0x7a, 0x39, 0xfc, 0x30, 0x30, 0xc3,
	0xfd, 0x53, 0x68, 0x3e, 0x8f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x6d, 0xe8, 0xeb, 0x30,
	0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ScriptRunnerClient is the client API for ScriptRunner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScriptRunnerClient interface {
	Test(ctx context.Context, in *RunTestRequest, opts ...grpc.CallOption) (*RunTestResponse, error)
	Namespace(ctx context.Context, in *RunNamespaceRequest, opts ...grpc.CallOption) (*RunNamespaceResponse, error)
	Module(ctx context.Context, in *RunModuleRequest, opts ...grpc.CallOption) (*RunModuleResponse, error)
	Record(ctx context.Context, in *RunRecordRequest, opts ...grpc.CallOption) (*RunRecordResponse, error)
}

type scriptRunnerClient struct {
	cc *grpc.ClientConn
}

func NewScriptRunnerClient(cc *grpc.ClientConn) ScriptRunnerClient {
	return &scriptRunnerClient{cc}
}

func (c *scriptRunnerClient) Test(ctx context.Context, in *RunTestRequest, opts ...grpc.CallOption) (*RunTestResponse, error) {
	out := new(RunTestResponse)
	err := c.cc.Invoke(ctx, "/compose.ScriptRunner/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptRunnerClient) Namespace(ctx context.Context, in *RunNamespaceRequest, opts ...grpc.CallOption) (*RunNamespaceResponse, error) {
	out := new(RunNamespaceResponse)
	err := c.cc.Invoke(ctx, "/compose.ScriptRunner/Namespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptRunnerClient) Module(ctx context.Context, in *RunModuleRequest, opts ...grpc.CallOption) (*RunModuleResponse, error) {
	out := new(RunModuleResponse)
	err := c.cc.Invoke(ctx, "/compose.ScriptRunner/Module", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptRunnerClient) Record(ctx context.Context, in *RunRecordRequest, opts ...grpc.CallOption) (*RunRecordResponse, error) {
	out := new(RunRecordResponse)
	err := c.cc.Invoke(ctx, "/compose.ScriptRunner/Record", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScriptRunnerServer is the server API for ScriptRunner service.
type ScriptRunnerServer interface {
	Test(context.Context, *RunTestRequest) (*RunTestResponse, error)
	Namespace(context.Context, *RunNamespaceRequest) (*RunNamespaceResponse, error)
	Module(context.Context, *RunModuleRequest) (*RunModuleResponse, error)
	Record(context.Context, *RunRecordRequest) (*RunRecordResponse, error)
}

// UnimplementedScriptRunnerServer can be embedded to have forward compatible implementations.
type UnimplementedScriptRunnerServer struct {
}

func (*UnimplementedScriptRunnerServer) Test(ctx context.Context, req *RunTestRequest) (*RunTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (*UnimplementedScriptRunnerServer) Namespace(ctx context.Context, req *RunNamespaceRequest) (*RunNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Namespace not implemented")
}
func (*UnimplementedScriptRunnerServer) Module(ctx context.Context, req *RunModuleRequest) (*RunModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Module not implemented")
}
func (*UnimplementedScriptRunnerServer) Record(ctx context.Context, req *RunRecordRequest) (*RunRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Record not implemented")
}

func RegisterScriptRunnerServer(s *grpc.Server, srv ScriptRunnerServer) {
	s.RegisterService(&_ScriptRunner_serviceDesc, srv)
}

func _ScriptRunner_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptRunnerServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compose.ScriptRunner/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptRunnerServer).Test(ctx, req.(*RunTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptRunner_Namespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptRunnerServer).Namespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compose.ScriptRunner/Namespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptRunnerServer).Namespace(ctx, req.(*RunNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptRunner_Module_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptRunnerServer).Module(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compose.ScriptRunner/Module",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptRunnerServer).Module(ctx, req.(*RunModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptRunner_Record_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptRunnerServer).Record(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compose.ScriptRunner/Record",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptRunnerServer).Record(ctx, req.(*RunRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScriptRunner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "compose.ScriptRunner",
	HandlerType: (*ScriptRunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _ScriptRunner_Test_Handler,
		},
		{
			MethodName: "Namespace",
			Handler:    _ScriptRunner_Namespace_Handler,
		},
		{
			MethodName: "Module",
			Handler:    _ScriptRunner_Module_Handler,
		},
		{
			MethodName: "Record",
			Handler:    _ScriptRunner_Record_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "script_runner.proto",
}
