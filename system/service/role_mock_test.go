// Code generated by MockGen. DO NOT EDIT.
// Source: system/service/role.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	types "github.com/crusttech/crust/system/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRoleService is a mock of RoleService interface
type MockRoleService struct {
	ctrl     *gomock.Controller
	recorder *MockRoleServiceMockRecorder
}

// MockRoleServiceMockRecorder is the mock recorder for MockRoleService
type MockRoleServiceMockRecorder struct {
	mock *MockRoleService
}

// NewMockRoleService creates a new mock instance
func NewMockRoleService(ctrl *gomock.Controller) *MockRoleService {
	mock := &MockRoleService{ctrl: ctrl}
	mock.recorder = &MockRoleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoleService) EXPECT() *MockRoleServiceMockRecorder {
	return m.recorder
}

// With mocks base method
func (m *MockRoleService) With(ctx context.Context) RoleService {
	ret := m.ctrl.Call(m, "With", ctx)
	ret0, _ := ret[0].(RoleService)
	return ret0
}

// With indicates an expected call of With
func (mr *MockRoleServiceMockRecorder) With(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockRoleService)(nil).With), ctx)
}

// FindByID mocks base method
func (m *MockRoleService) FindByID(roleID uint64) (*types.Role, error) {
	ret := m.ctrl.Call(m, "FindByID", roleID)
	ret0, _ := ret[0].(*types.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockRoleServiceMockRecorder) FindByID(roleID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockRoleService)(nil).FindByID), roleID)
}

// Find mocks base method
func (m *MockRoleService) Find(filter *types.RoleFilter) ([]*types.Role, error) {
	ret := m.ctrl.Call(m, "Find", filter)
	ret0, _ := ret[0].([]*types.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockRoleServiceMockRecorder) Find(filter interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRoleService)(nil).Find), filter)
}

// Create mocks base method
func (m *MockRoleService) Create(role *types.Role) (*types.Role, error) {
	ret := m.ctrl.Call(m, "Create", role)
	ret0, _ := ret[0].(*types.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockRoleServiceMockRecorder) Create(role interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoleService)(nil).Create), role)
}

// Update mocks base method
func (m *MockRoleService) Update(role *types.Role) (*types.Role, error) {
	ret := m.ctrl.Call(m, "Update", role)
	ret0, _ := ret[0].(*types.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockRoleServiceMockRecorder) Update(role interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRoleService)(nil).Update), role)
}

// Merge mocks base method
func (m *MockRoleService) Merge(roleID, targetroleID uint64) error {
	ret := m.ctrl.Call(m, "Merge", roleID, targetroleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Merge indicates an expected call of Merge
func (mr *MockRoleServiceMockRecorder) Merge(roleID, targetroleID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockRoleService)(nil).Merge), roleID, targetroleID)
}

// Move mocks base method
func (m *MockRoleService) Move(roleID, organisationID uint64) error {
	ret := m.ctrl.Call(m, "Move", roleID, organisationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Move indicates an expected call of Move
func (mr *MockRoleServiceMockRecorder) Move(roleID, organisationID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockRoleService)(nil).Move), roleID, organisationID)
}

// Archive mocks base method
func (m *MockRoleService) Archive(ID uint64) error {
	ret := m.ctrl.Call(m, "Archive", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Archive indicates an expected call of Archive
func (mr *MockRoleServiceMockRecorder) Archive(ID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Archive", reflect.TypeOf((*MockRoleService)(nil).Archive), ID)
}

// Unarchive mocks base method
func (m *MockRoleService) Unarchive(ID uint64) error {
	ret := m.ctrl.Call(m, "Unarchive", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unarchive indicates an expected call of Unarchive
func (mr *MockRoleServiceMockRecorder) Unarchive(ID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unarchive", reflect.TypeOf((*MockRoleService)(nil).Unarchive), ID)
}

// Delete mocks base method
func (m *MockRoleService) Delete(ID uint64) error {
	ret := m.ctrl.Call(m, "Delete", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRoleServiceMockRecorder) Delete(ID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoleService)(nil).Delete), ID)
}

// MemberList mocks base method
func (m *MockRoleService) MemberList(roleID uint64) ([]*types.RoleMember, error) {
	ret := m.ctrl.Call(m, "MemberList", roleID)
	ret0, _ := ret[0].([]*types.RoleMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemberList indicates an expected call of MemberList
func (mr *MockRoleServiceMockRecorder) MemberList(roleID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberList", reflect.TypeOf((*MockRoleService)(nil).MemberList), roleID)
}

// MemberAdd mocks base method
func (m *MockRoleService) MemberAdd(roleID, userID uint64) error {
	ret := m.ctrl.Call(m, "MemberAdd", roleID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MemberAdd indicates an expected call of MemberAdd
func (mr *MockRoleServiceMockRecorder) MemberAdd(roleID, userID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberAdd", reflect.TypeOf((*MockRoleService)(nil).MemberAdd), roleID, userID)
}

// MemberRemove mocks base method
func (m *MockRoleService) MemberRemove(roleID, userID uint64) error {
	ret := m.ctrl.Call(m, "MemberRemove", roleID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MemberRemove indicates an expected call of MemberRemove
func (mr *MockRoleServiceMockRecorder) MemberRemove(roleID, userID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberRemove", reflect.TypeOf((*MockRoleService)(nil).MemberRemove), roleID, userID)
}
